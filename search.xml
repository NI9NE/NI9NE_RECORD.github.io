<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MySQL 基础操作-OOP面向对象]]></title>
    <url>%2F2018%2F05%2F13%2FMySQL%20%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C-OOP%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[2.面向对象1.类简介 主要内容包括 类 和 对象 1.类 ​ class类中主要两种元素，函数（方法），变量（属性） ​ 函数不调用不执行功能，类不实例化为对象无法使用 设计类的时候，需要考虑什么：（一切皆对象） 该类有什么（属性）？ 该类会什么（方法）？ 注意： 类本身是无法执行的，本身是虚构的，不存在的 对象才是真正能使用的 类与对象之间的关系 类 就是对象的抽象化 对象 就是类的实例化 格式 12345class 类名&#123; 成员属性 成员方法&#125; 6.实例 12345678910111213141516171819202122232425262728293031323334class Beauty&#123; public $name = &apos;迪丽热巴&apos;; #属性 public $age = 18; public $weight = &apos;90斤&apos;; public $height = &apos;180cm&apos;; public function skill1() #方法 &#123; echo &apos;吹&apos;; &#125; public function skill2() &#123; echo &apos;拉&apos;; &#125; public function skill3() &#123; echo &apos;弹&apos;; &#125; public function skill4() &#123; echo &apos;唱&apos;; &#125;&#125;$obj = new Beauty; #实例化echo $obj-&gt;name; #对象 -&gt; 属性名echo $obj-&gt;height;echo $obj-&gt;weight;$obj-&gt;skill1(); #对象 -&gt; 方法名()$obj-&gt;skill2();$obj-&gt;skill3(); 总结： ​ 1、在使用之前，要先将类实例化为对象，即：类-&gt;对象 ​ $对象名 = new 类名; ​ 2、输出属性时，格式为：对象 -&gt; 属性名 ​ echo $obj-&gt;name; ​ 3、调用方法时，格式为：对象 -&gt; 方法名() ​ $obj-&gt;skill(); 2.伪对象1.定义 ​ 在类的内部，可以使用自己的属性or方法，此时， $this 代表当前对象 称为伪对象 2.实例 1234567891011121314151617181920212223class Beauty &#123; public $name = &apos;迪丽热巴&apos;; public $age = 18; public $weight = &apos;90斤&apos;; public $height = &apos;180cm&apos;; public function skill1()&#123;echo &apos;吹&apos;;&#125; public function skill2()&#123;echo &apos;拉&apos;;&#125; public function skill3()&#123;echo &apos;弹&apos;;&#125; public function skill4()&#123;echo &apos;唱&apos;;&#125; public function demo()&#123;// 类的内部, 使用自己的属性or方法 $x = new Beauty; echo $x-&gt;name; $x-&gt;skill4(); echo &apos;&lt;hr&gt;&apos;; echo $this-&gt;name; $this-&gt;skill4(); echo &apos;&lt;hr&gt;&apos;; &#125; &#125; &#125; 总结： ​ 伪对象$this代表当前对象, 在哪个类中使用, 就相当于$this = new 当前类名 ​ $this不需要实例化, 可直接使用. ​ $this只能在类内使用 3.连贯操作​ 若要在执行时连续调用方法，可采用如下格式： ​ 1. $obj-&gt;step1()-&gt;step2()-&gt;step3()...; ​ 2.将连续调用的前面的方法加上return $this 注意：若直接采用1，而不return返回对象，会报错 Call to a member function step2() on null 相当于null-&gt;step2() 4.魔术方法1.定义：​ 魔术方法，就是在指定条件触发时，会自动调用的方法，这里主要介绍两种 ​ __construct() 构造方法 ​ __destruct() 析构方法 2.构造方法​ 触发条件：在实例化时，自动触发 ​ 使用场合：常用于初始化属性 ​ 注意：一般构造都写在方法的最前面，属性的最后面 1234567891011121314151617class Lengend&#123; #构造方法 public function __construct() &#123; echo &apos;&lt;h1&gt;欢迎来到召唤师峡谷&lt;/h1&gt;&apos;; &#125; #普通方法 public function demo() &#123; echo &apos;升段局，掉2挂1，人马加大树强撑40分钟，队友重连绝地翻盘&lt;hr&gt;&apos;; &#125;&#125;$obj=new Lengend;$obj-&gt;__construct();// $obj-&gt;demo(); 3.析构方法​ 触发条件：当对象被销毁时，自动触发，包括： ​ 1）.程序全部执行完，自然销毁 ​ 2）.对象被主动删除了 ​ 3）.对象被覆盖了（更换） ​ 使用场合：当对象使用完的一些扫尾操作（fclose、closedir） ​ 注意：一般析构方法都写在方法的最后面 1234567891011121314151617181920class Lengend&#123; public function demo() &#123; echo &apos;开始一盘游戏&apos;; echo &apos;&lt;hr&gt;&apos;; &#125; public function __destruct() &#123; echo &apos;关上电脑&apos;; &#125;&#125;$obj=new Lengend;$obj-&gt;demo();echo &apos;断电了&lt;br&gt;&apos;;unset($obj); #2)对象被主动删除$obj=&apos;迪丽热巴&apos;; #3)换对象了 #1)自然结束，就会销毁$obj,从而触发析构 4.实例化PDO类​ PDO 数据抽象层，专门负责数据库操作管理 12345678$dsn=&apos;mysql:host=localhost;dbname=&apos;test&apos;;charset=utf8;$user=&apos;root&apos;;$pwd=&apos;&apos;;$pdo=new PDO($dsn,$user,$pwd); #1.链接数据库$sql=&apos;select id,nickname,tel,address from user&apos;; #2.编写sql语句$pdostatement=$pdo-&gt;query($sql); #3.执行sql语句$result=$pdostatement-&gt;fetchAll(PDO::FETCH_NUM); #4.解析对象var_dump($result); #5.输出结果 总结： ​ 1.PDO类::方法 PDO::query( ) 执行一条SQL语句 成功返回PSOStatement，适合查询，失败返回false PDO::exec( ) 执行一条SQL语句 成功返回受影响的行数，适合增删改，失败返回false PDO::lastInsertId( ) 获取最近一次插入的ID 成功返回最新的id，失败返回 &#39;0&#39; 字符 PDO::errorInfo( ) 获取错误信息 ​ 2.PDOStatement类::方法 PDOStatement::fetch( ) 获取结果集中的一条数据（依靠指针）失败返回false PDOStatement::fetchAll( ) 获取结果集中的所有数据，参数设置显示格式 PDO::FETCH_NUM 索引数组格式 PDO::FETCH_ASSOC 关联数组格式 PDO::FETCH_BOTH 混合数组格式 3.OOP面向对象面向对象OOP的三大特性：1.封装性 ；2.继承性 ；3.多态性 1.封装性 定义：将对象的所有成员结合在一起，形成一个不可分割的独立单位 目的：尽可能的隐藏属性 和 方法，只留下部分接口与外部联系 提供以下三种修饰符，来控制与外部的联系 修饰符 本类 继承类 类外 public √ √ √ 公有的 protected √ √ x 受保护的 private √ x x 私有的 想要有高安全性 或者 只想自己使用的，最好设置为private。 2.魔术方法 如果在类外使用私有属性或方法，程序会立即终止并报错 为了避免终止程序，可以使用一些魔术方法做提示，并绕过error错误 __get($x) 当访问权限不足或不存在的属性时，自动触发，返回访问属性名 __set($x,$y) 当设置权限不足或不存在的属性时，自动触发，返回设置属性名和值 __unset($x) 当删除权限不足或不存在的属性时，自动触发，返回要删除的属性名 __isset($x) 当判断是否存在的目标权限不足或不存在时触发，返回要判断的属性名 __call($x,$y) 当访问权限不足或不存在的方法时，自动触发，返回方法名和实参 __tostring() 当echo对象时触发，返回字符串值 3.继承性 定义：子类（-派生类/扩展类）继承父类（基础类/基类）的一些属性和方法 格式 class 子类 extends 父类 {} 实例 1234567891011121314class laozi&#123; public $name = &apos;老王&apos;; public function skill() &#123; echo &apos;喜欢去隔壁转转 &lt;br&gt;&apos;; &#125;&#125;class son extends laozi&#123;&#125;$obj = new son; #实例化子类echo $obj-&gt;name; #直接调用子类继承的属性$obj-&gt;skill(); #直接调用子类继承的方法 特点 子类可以继承属性，方法（除了private） 子类可以重写属性，方法 子类可以扩展方法 parent::父级方法名 访问级别： private&gt;protected&gt;public 子类继承父类时，修饰符可以保留等级，可以降级，就是不能升级 继承方式 单继承（一个子级可以继承一个父级） 连续继承（爷-&gt;父-&gt;子-&gt;孙 依次继承） 多继承（无法在PHP中实现） 4.类静态1.关键字： ​ static 2.格式： ​ static 修饰符 $属性名=属性值； ​ static 修饰符 function 方法名（）{}; 3.使用格式： ​ 类名::静态属性名 / 类名::静态方法名() ​ self 代表当前的类名，只能在类内使用 ​ $this 代表当前的对象 123456789101112class Beauty&#123; static public $name = &apos;小张&apos;; #设置静态属性 // public $age = 18; #静态类内不能使用非静态属性 static public function demo() #设置静态方法 &#123; echo &apos;i am static demo &lt;hr&gt;&apos;; echo self::$name; #类内调用静态属性 echo &apos;&lt;hr&gt;&apos;; &#125;&#125;Beauty::demo(); #引用静态方法 4.特性： 静态属性或方法 不需要实例化就可以直接使用 静态方法内部只能使用静态属性或方法 静态属性和方法可以继承 5.魔术方法 ​ __callStatic($x,$y) ​ 在访问不存在的静态方法时，自动触发，返回静态方法名和实参 5.类常量1.格式 ​ const 类常量名=值； 2.使用类常量 ​ 类名::类常量 3.特性 类常量可以继承，且可以重写一次 普通常量可以直接在类内使用（常量没有作用域） 类常量不能直接在类外使用，必须要通过类名来使用 1234567891011const NAME = &apos;黑寡妇&apos;;class Beauty&#123; const SEX = &apos;美女&apos;; #定义类常量 public function demo() &#123; echo self::SEX; echo NAME; # 直接输出类外的 普通常量NAME &#125;&#125;echo Beauty::SEX; #输出类内常量 6.最终 final1.使用：123456789101112final class Beauty #final 修饰类，保护不被继承 &#123; public $name = &apos;陈琳琳&apos;; &#125; ------------------------------------------------------class Father &#123; final public function Order() #final修饰方法 &#123; echo &apos;这是祖辈留下的祖训: 不能吃猪肉 &lt;br&gt;&apos;; &#125; &#125; 2.特性 final 可以修饰类和方法，不能修饰属性 final 修饰类，保护类不被继承 final 修饰方法，保护方法不被继承方法重写 7.克隆对象 clone1.格式​ 副本对象 = clone 样本对象； 2.使用1234567class Beauty &#123; public $name = &apos;米拉乔沃维奇&apos;; &#125; $a = new Beauty; #创建一个对象 $b = clone $a; #克隆对象 3.特性​ 副本与样本对象完全一样，却互不影响，完全独立 克隆（clone）与复制出来的对象不一样，修改克隆副本对原样本没有任何影响，而修改复制对象则会影响原样本，相同点是删除副本对原样本都没有影响，原因如下： ​ 变量与内存是通过标识来引用的； ​ 删除原样本，只是删除元样本和标识之间 的联系，与复制副本无关； ​ 息息相关的只是内存的内容 4.克隆魔术方法1.函数：​ __clone() 2.作用：​ 克隆操作时触发，可以为克隆副本重新初始化属性 3.实例12345678910111213class Demo&#123; public $name=&apos;kamora&apos;; public function __clone() &#123; $this-&gt;name=&apos;kamora2&apos;; #克隆对象重写 &#125; &#125;$a=new Demo;$b=clone $a; #克隆操作var_dump($a,$b); 8.串行化/序列化1.函数​ 串行化： serialize( ) ​ 反串行化： unserialize( ) 2.目的​ 将对象串行化为字符串 3.使用场景​ 传参，存入文本，存数据库 … 4.实例1234567$obj=new Game; #创建一个对象$str= serialize($obj); #串行化对象，存入变量file_put_contents(&apos;./save.txt&apos;,$str); #将变量内容存入文件$newStr=file_get_contents(&apos;./save.txt&apos;); #读取文件内容 $newObj=unserialize($newStr); #对读取内容反串行化$newObj-&gt;skill(); #使用对象属性方法 5.串行化魔术方法1.函数： __sleep( ) ​ serialize串行化时触发,用以返回需要的信息(数组形式) __wakeup( ) unserialize反串行化时触发, 用以重新初始化属性 2.应用:1234567891011121314151617181920class Game&#123; public $name = &apos;DNF&apos;; public $money = 200000; public function skill() &#123; echo &apos;崩山斩&apos;; &#125; public function __sleep() &#123; // 返回需要显示的信息(以数组形式返回) return [&apos;name&apos;,&apos;nickname&apos;]; &#125; //其余信息隐藏,实际上还是存在 public function __wakeup() &#123; // 在唤醒时, 重新初始化属性 $this-&gt;money = 2; &#125;&#125; 9.魔术方法—自动加载 在真实项目中 , 一个PHP文件内 , 只有一个类 , 没有多余的代码，可以在多PHP相互加载的状态下的纯PHP界面省略定界符&lt;?= ?&gt; 中的后面部分，需要引入的HTML文件使用 include / include 加载 1.格式1234function __autoload($x)&#123; &#125; 2.作用 :​ 在实例化一个不存在的类时 , 自动触发 , 返回要求实例化的类名 3.使用场景 :​ 使用数据库功能 , 上传文件功能 , 图形验证码功能等…. 4.实例:123456789101112一次性加载所有的类文件:function __autoload()&#123; #如果相关类文件存在 if( file_exists(&quot;./Model/&#123;$x&#125;.php&quot;) )&#123; include &quot;./Model/&#123;$x&#125;.php&quot;; &#125;else&#123; header(&apos;location:404.php&apos;); #跳转到404页面 die; &#125;&#125;$a=new DB; #实例化数据库类$b=new Upload; #实例化上传类 10.抽象1.抽象 抽象方法 : 没有方法体( 代码块 ) 的方法 抽象类 : 包含抽象方法的类 1.关键字 ​ abstract 2.特性 包含抽象方法的类必须为抽象类 抽象类不一定需要包含抽象方法 抽象类不能被实例化 抽象类必须被子类继承 , 并实现抽象方法 3.目的 ​ 强制约束子类继承并实现抽象方法 12345678910111213141516 abstract class Demo #定义抽象类&#123; public function func1() &#123; echo &apos;该项目已经完成了 20% &lt;br&gt;&apos;; &#125; abstract public function func2(); #定义抽象方法 &#125; class Friend extends Demo #子类继承抽象类 &#123; public function func2() #子类事项抽象方法 &#123; echo &apos;该项目已经完成了 30% &lt;br&gt;&apos;; &#125; &#125;$obj = new Friend; #实例化子类,调用方法 2.接口1.定义 ​ 当类中全部都是抽象方法时,可定义为接口 ​ 即接口就是抽象类( 条件 : 内部方法全部为抽象方法 ) 2.特性 ​ 接口继承是通过 implements 关键字继承的 (不是extends) ​ 接口可以实现多继承( 可以有多个父类,分别实现各个父类继承的抽象方法 ) 12345678910111213141516171819202122232425 interface Demo #定义接口Demo &#123; public function func1(); #内部方法全部为抽象方法 public function func2(); public function func3(); &#125; class Friend implements Demo #子类继承Demo&#123; public function func1() #子类实现继承的抽象方法 &#123; echo &apos;该项目已经完成了 20% &lt;br&gt;&apos;; &#125; public function func2() &#123; echo &apos;该项目已经完成了 50% &lt;br&gt;&apos;; &#125; public function func3() &#123; echo &apos;该项目已经完成了 30% &lt;br&gt;&apos;; &#125;&#125;$obj = new Friend; #实例化子类$obj-&gt;func1(); #调用Demo方法 3.类型约束 PHP支持的函数实参类型约束有数组和对象 格式 : 方法名( 类名 变量 )|方法名( array 变量 ) 12345678function demo(array $x) #约束送入的实参只能是数组类型 &#123; var_dump($x); &#125; // demo($a=100); #送入整型数据程序报错 $b = [10,20,30]; demo($b); #送入数组,正常输出 123456789101112131415161718class Demo1 &#123;&#125;class Demo2&#123; public function Test(Demo1 $x) #要求送入Demo1对象 &#123; var_dump($x); &#125;&#125;class Demo3 &#123;&#125;$demo1 = new Demo1; #实例化类,得到对象$demo2 = new Demo2;$demo3 = new Demo3;$demo2-&gt;Test($var=100); #送入整型数据,程序报错$demo1-&gt;Test($demo1); #送入demo1,正常输出 4.接口多态性 多态性 : 通过同一个接口 [ 抽象类|普通类 ] ,传入不同的设备,从而实现不同的效果 ( 普通类没有强制约束子类执行指定方法的特征 , 不推荐使用 ) 12345678910111213141516171819202122232425262728293031323334353637383940interface USB #定义接口&#123; public function run();&#125; #指定抽象方法,一旦实现USB必须执行run方法class Mouse implements USB #继承抽象类&#123; public function run() #实现抽象方法 &#123; echo &apos;安装鼠标驱动&apos;; &#125; public function double() #扩展接入接口的子类方法 &#123; echo &apos;双击功能实现&apos;; &#125;&#125;class Keyboard implements USB&#123; public function run() &#123; echo &apos;安装键盘驱动&apos;; &#125; public function click() &#123; echo &apos;击键功能实现&apos;; &#125;&#125;class Computer #设置接口使用环境&#123; public function Start(USB $x) #接入接口 &#123; $x-&gt;run(); &#125;&#125;$c=new Computer; #实例化$m=new Mouse;$k=new Keyboard;$c-&gt;start($m); #依接入类型运行接口方法$c-&gt;start($k); #?如何使用double() 5.foreach遍历对象 foreach不但能够遍历数组,也可以遍历对象 1234567891011121314151617181920class Book&#123; public $name; #成员属性只能定义,不赋初值 public $price; private $author; public function __construct($a,$b,$c) #初始化属性 &#123; $this-&gt;name = $a; $this-&gt;price= $b; $this-&gt;author=$c; &#125; $zhang=new Book(&apos;《新三国》&apos;,&apos;30元&apos;,&apos;小飞&apos;); $cheng=new Book(&apos;《旧三国》&apos;,&apos;50元&apos;,&apos;阿亮&apos;);&#125; #类外依旧受修饰符影响foreach($zhang as $key =&gt; $value)&#123; echo $key.&apos;------&apos;.$value.&apos;&lt;br&gt;&apos;;&#125;foreach($cheng as $key =&gt; $value)&#123; echo $key.&apos;------&apos;.$value.&apos;&lt;br&gt;&apos;;&#125; 注意: 遍历对象是将对象中的 ( 属性名=&gt;属性值 ) 遍历显示 6.对象相关函数 判断类是否存在 class_exists( &#39;类名&#39; ) 返回bool值 判断某个类下的属性是否存在 property_exists( &#39;类名&#39;,&#39;属性名&#39; ) 返回bool值 可以检测私有属性,但不显示具体值 获取类中的所有公有属性 get_class_vars( &#39;类名&#39; ) 返回数组, 包含属性名和属性值 获取对象中的所有公有属性 get_object_vars( &#39;对象&#39; ) 返回数组, 包含属性名和属性值 获取类中的所有公有方法 get_class_method( &#39;类名&#39; ) 返回索引数组, 包含所有方法名 获取某个对象的类名 get_class( &#39;对象&#39; ) 返回字符串, 类名]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL 基础操作-增删改查]]></title>
    <url>%2F2018%2F04%2F05%2FMySQL%20%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%2F</url>
    <content type="text"><![CDATA[1.数据库1.数据库基本操作常见数据库包括：MySQL，Oracle，SQL server，Redis … 1.定义 ​ 存储数据的仓库，即按照数据结构来组织，存储和管理数据的仓库 选择 MySQL 的原因有：免费，开源，跨平台，支持事务… 2.链接数据库的步骤 ​ 开启服务器——&gt;设置主机IP——&gt;用户名（默认root）——&gt;密码（默认为空） 3.组成 ​ 一个完整的数据库由库（database），表（table）和数据（data）组成，先有库，再有表，最后才有数据的增删改查，也就是说先使用库，才能使用表 4.基本语法 ​ MySQL 的每一条数据都是以分号( ; ) 作为结束符 5.常用SQL命令 ​ 打开命令窗口： F6 ​ 使用数据库： use 库名; ​ 创建数据库： create database [if not exists] 库名 default charset 编码方式; ​ 删除数据库： drop database 库名; ​ 查询数据库结构： show databases; 注意：database需要加s，作为复数格式 ​ 查询数据表： show tables; 注意：在使用库之前，无法使用表 ​ 创建数据表： 12345678910create table if not exists 库名(字段名 字段类型 字段属性,字段名 字段类型 字段属性,字段名 字段类型 字段属性, ...字段名 字段类型 字段属性,字段名 字段类型 字段属性 )engine=myisam|innodb default charset=utf8; ​ 注意：每一组之间用逗号( , ) 隔开，最后一组字段不用加 ​ 删除数据表： drop table 表名； ​ 查看表结构： desc 表名； ​ 查看建表语句： show create table 表名 ​ 注意：所有的库名，表名，字段名都需要加上反引号( ` )，所有的字符串需要加上单双引号 ​ 反引号可以将库名，表名，字段名实体化，取消特殊意义 2.数据库数据操作1.插入数据（增） 插入单条数据：格式： insert into 表名 values(值1，值2，值3，...); 注意点： ​ 主键由于配合自增属性，所以不用主动设置，默认用null代替，值会自动根据最大记录+1； ​ 如果有默认值，可以用default代替 插入单条数据部分字段：格式： insert into 表名（字段1，字段2，字段3，....） vaules(值1，值2，值3，...); 注意： ​ 表名后面填了多少个字段，values就对应填多少个值； ​ 如果字段具有not null属性，那么必须填写‘’ 使用场合：用户注册，不需要填写所有数据表单 插入多条数据：格式： insert into 表名 values(...),(...),(...), ... (...); 插入多条数据部分字段格式： insert into 表名（字段1，字段2，...）values(...),(...),(...), ... (...); 2.更新数据（改） 更新所有数据格式： update 表名 set 字段1=值1，字段2=值2，...; 条件更新格式： update 表名 set 字段1=值1，字段2=值2，... where 条件表达式 3.删除数据（删） 全部删除格式： ​ delete from 表名； 注意：该删除方式只会删除数据，不会删除曾经的数据记录 全部删除（不留记录）格式： ​ truncate table 表名； 注意：该删除方式会连着数据和记录一起删除，如果想清空表，推荐使用truncate 部分删除格式： ​ delete from 表名 where 条件表达式； 排序删除格式： ​ delete from 表名 [where 条件表达式] order by 字段 asc|desc limit 行数 注意： asc为升序排序，desc为降序排序 3.函数1.聚合函数 统计总个数：count( ) select count(id) from user; 统计user表中一共有几个id 求和：sum( ) select sum(age) from user; 统计user表中age的综合 求平均值：avg( ) select avg(age) from user; 统计user表中的平均年龄 求最大值：max( ) select max(age) from user; 获取user表中的最大年龄 求最小值：min( ) select min(age) from user; 获取user表中的最小年龄 2.字符串拼接函数​ 格式：concat(s1,s2,s3,...) ​ 注意：s1,s2,s3可以代表字段名，也可以代表字符串值 ​ select concat(id,&#39;......&#39;,nickname,&#39;......&#39;,address) from user; 3.数据库版本​ select version(); 4.当前时间​ select now(); 5.md5加密​ md5(&#39;1234234&#39;); 6.当前时间戳​ select unix_timestamp(); 4.查询数据1.整体结构1234567select * | distinct | 字段名 | 字段名 as 别名 | 表名.字段名from 表名 | 表名1，表名2，...where 条件表达式group by 字段having 条件order by 条件limit 下标，行数 注意：以上为查询数据的基本结构，先后书序无法颠倒，但可以省略其中一部分 2.具体查询 查询1：查询该表中的所有数据 格式： select * from 表名； 实例： select * from user; 注意： * 通配符代表所有的字段，查询所有的字段，推荐少用或不用 查询2：查询该表中的指定字段 格式： select 字段1，字段2，字段3，... from 表名； 实例：select tel pwd from user; 查询3：带条件查询 格式：select *|字段名 from 表名 where 条件； &lt; 查询所有未成年的名字 select name from user where age&lt;18; &gt;= 查询所有成年的名字 select name from user where age&gt;=18; = 精确查询刚好18岁的名单 select name from user where age=18; != 查询所有不是18岁的名单 select name from user where age!=18; between A and B 查询年龄在15到30之间的名单 select name from user where age between 15 and 30; not between A and B 查询年龄不在20~30岁之间的名单 select name from user where age not between 20 and 30; like 模糊查询 名字带有’小‘的名单 select name like &quot;小&quot;； select name like &quot;%小%&quot;; 注意：% 通配符可匹配0个，1个或多个字符； ​ _ 通配符可以匹配一个字符 in 查询来自于召唤师峡谷的名单 select name,address from user where address in (&#39;召唤师峡谷&#39;); not in 查询地址信息不为空的名单 select name,address from user where address not in (&#39;null&#39;); 逻辑：与 and | 或 or 查询 来自于召唤师峡谷的女孩子 select name,address,sex from user where address=&#39;召唤师峡谷&#39; and sex=2; 查询女孩子或者来自于xxx楼的名单 select name,address,sex from user where address like &quot;%楼&quot; or sex=2; 空与非空： is null 和 is not null 查询有住址的名单 select name from user where address is not null; 查询住址信息为空的名单 select name from user where address id null; group by 分组 : 查询user中名单分别来自哪些地方 select address from user group by address; 注意：一旦分组，就不能查询单一数据，必须按照“组”为单位来查询 having 筛选： 筛选人数多于一个的地址 select address,count(id) from user group by address having count(id)&gt;1; 注意：having一般都是配合group by来使用，先分组再筛选 order by 排序 按照生日从大到小查看名单 select nickname,birthday from user order by birthday desc; 注意：desc为降序排序，asc为升序排序 limit 前几个 查询user表单中的前3个人信息 select * from user limit 3; 注意：标准格式为：limit 下标，行数,代表从下标开始的几行数据 5.多表查询 多张表同时查询 1.条件限制：​ 多张表之间必须要求有联系 ​ 多表有相同字段时，必须声明是哪张表中的字段（表名.字段名） ​ n张表之间的联系至少有 n-1 条 2.格式：1234select 字段from 表名1，表名2，表名3，...where 表名1.字段1 = 表名2.字段1 ...... 3.实例：​ 查询每个人的昵称，住址，部门，薪资 123select uid,nickname,address,dep,moneyfrom user,salarywhere user.id=salary.uid 6.嵌套查询 将一条sql语句的结果作为另一条sql的条件来使用 实例 ​ 查询每个部门最高工资的uid 123select uid,money,depfrom salarywhere money in ( select max(money) from salary group by dep ) 7.多表+嵌套​ 查询每个部门最高工资的uid 123456select uid,s.money,s.depfrom salary as s,( select dep,max(money) as money from salary group by dep ) as twhere s.dep=t.dep and s.money=t.money 8.别名​ 给字段，表名取个别名 as ​ select dep,max(monry) as money from salary as s group bu dep; 9.取消重复​ select distinct address from user;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 简介07-文件操作]]></title>
    <url>%2F2018%2F03%2F15%2FPHP%20%E5%9F%BA%E7%A1%8007-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[1.文件操作函数1.回顾：文件常见分类：file（文件） 和 dir（文件夹） 路径： 相对路径 . 当前目录 .. 上级目录 ​ 绝对路径 （盘符型，网址型，根www) 2.文件属性：1.文件类型：​ filetype（&#39; 文件路径 &#39;） 输入一个文件路径，返回文件类型（file 文件|dir 文件夹） 2.文件大小：​ filesize（&#39; 文件路径 &#39;） 输入一个文件路径，检测文件大小，单位是字节（不支持文件夹，结果不准确，以最小文件单元(4096字节)作为单元计算） 3.文件是否存在：​ file_exists（&#39; 文件路径 &#39;） 输入一个路径，返回判断结果bool值 4.文件是否可读可写​ is_readable（&#39; 文件路径 &#39;） 输入一个路径，判断是否可读，返回bool值 ​ is_writeable（&#39; 文件路径 &#39;） 输入一个路径，判断是否可写，返回bool值 5.返回文件的创建/修改/访问时间​ filectime（&#39; 文件路径 &#39;） 输入路径，返回文件的创建（creative）时间 ​ filemtime（&#39; 文件路径 &#39;） 输入路径，返回文件的修改（modification）时间 ​ fileatime（&#39; 文件路径 &#39;） 输入路径，返回文件的访问（access）时间 6.获取目录/文件名​ dirname（&#39; __FILE__ &#39;） 输入当前文件路径，获取路径名（dir） ​ basename（&#39; __FILE__ &#39;） 输入当前文件路径，获取文件名（file） 12345需求：面试题 获取该地址的文件扩展名$url = &apos;http://www.baidu.com/av/gt18/ka.n.g.mp4?age=18&amp;type=人兽#xxoo&apos;;$a=basename($url);$a=strtok($a,&apos;?&apos;);$a=strrchr($a,&apos;.&apos;); 7.网址解析​ parse_url(&#39; url &#39;) 123456789$url=&apos;http://www.baidu.com:80/av/gt18/ka.n.g.mp4?age=18&amp;type=人兽#xxoo&apos;var_dump(parse_url($ur;));/*array (size=6) &apos;scheme&apos; =&gt; string &apos;http&apos; (length=4) #协议 &apos;host&apos; =&gt; string &apos;www.baidu.com&apos; (length=13) #域名 &apos;port&apos; =&gt; int 80 #端口 &apos;path&apos; =&gt; string &apos;/av/gt18/ka.n.g.mp4&apos; (length=19) #路径 &apos;query&apos; =&gt; string &apos;age=18&amp;type=人兽&apos; (length=18) #参数 &apos;fragment&apos; =&gt; string &apos;xxoo&apos; (length=4)*/ #锚点 8.盘符解析​ pathinfo(&#39; $path &#39;) 1234567$path=&apos;D:\wamp\www\s86\0422\01-file.php&apos;;var_dump($path);/*array (size=4) &apos;dirname&apos; =&gt; string &apos;D:\wamp\www\s86\0422&apos; (length=20) #路径名 &apos;basename&apos; =&gt; string &apos;01-file.php&apos; (length=11) #文件名 &apos;extension&apos; =&gt; string &apos;php&apos; (length=3) #扩展名 &apos;filename&apos; =&gt; string &apos;01-file&apos; (length=7)*/ #文件名（无后缀） 3.递归函数（三元归一遍历）1.函数​ opendir(&#39; path &#39;) 打开一个目录，返回资源 ​ readdir(&#39; resource name &#39;) 读取一个资源，返回当前资源名（实际上利用指针） ​ close(&#39; resource name &#39;) 关闭一个资源，释放内存 2.应用​ 需求：将./demo1 目录中的所有文件名，输出到屏幕上 ​ 1.原始访问方式： 123456789$handle=opendir(&apos;./demo1&apos;); #windows中，每个文件夹中都有 . 和 .. 文件夹var_dump(readdir($handle)); #当前目录 . var_dump(readdir($handle)); #上级目录 ..var_dump(readdir($handle));...var_dump(readdir($handle));var_dump(readdir($handle)); #超出范围之外，返回falseclosedir($handle); ​ 2.循环访问方式： 123456789$handle=opendir(&apos;./demo1&apos;);while( ($file=readdir($handle))!=false )&#123; #循环访问方式 if($file==&apos;.&apos;||$file==&apos;..&apos;)&#123; #排除显示 . 和 .. continue; &#125; echo $file; echo &apos;&lt;br&gt;&apos;;&#125;closedir($handle); #关闭资源 3.递归函数1.函数：​ is_file( &#39;path name&#39; ) 判断当前路径是否为文件 ​ is_dir( &#39;path name&#39; ) 判断当前路径是否为目录 ​ 注：参数必须为完整的地址，否则输出false。相对，绝对都可以 2.递归函数：​ 1）函数自己调用自己 ​ 2）必须要有终止条件 3.应用123456789101112131415161718191.需求：函数功能-输出所有子目录下的所有文件和子目录function getFile( $dir )&#123; $handle=opendir($dir); #打开目录，获取资源 while(($file=readdir($handle))!=false)&#123; #读取资源 if($file==&apos;.&apos;|$file==&apos;..&apos;)&#123; #排除 . 和 .. 文件夹 continue; &#125; $path=$dir.&apos;/&apos;.$file; #拼凑完整路径 if(is_file($path))&#123; #判断是否为文件，是则输出文件名 echo $file.&apos;&lt;br&gt;&apos;; &#125; if(is_dir($path))&#123; #判断是否为目录，是则输出目录名， echo $file.&apos;&lt;br&gt;&apos;; getFile($path); #调用函数打开子目录 &#125; &#125; closedir($handle); #关闭资源&#125; 12345678910111213141516171819202.需求：函数功能-获取某个目录的大小function getDirSize( $dir )&#123; $handle=opendir($dir)； $sum=0; while(($file=readdir($handle))!=false)&#123; if($file=&apos;.&apos;|&apos;..&apos;)&#123; continue; &#125; $path=$dir.&apos;/&apos;.$file; if(is_file($path))&#123; $sum=$sum+fileseze($path); &#125; if(is_dir($path))&#123; $sum+=getDieSize($path); &#125; &#125; closedir($handle); renturn $sum;&#125; 1234567891011121314151617181920213.需求：函数功能-统计某个目录下有多少个文件和文件夹function getFileNumber( $dir )&#123; $handle=opendir($dir); $dirSum=0; $fileSum=0; while(($file=readdir($handle))!=false)&#123; if($file=&apos;.&apos;||$file=&apos;..&apos;)&#123; continue; &#125; $path=$dir.&apos;/&apos;.$file; if(is_file($path))&#123; $fileSum+=1; &#125; if(is_dir($path))&#123; $dirSum+=getFileNumber($path); $fileSum+=getFileNumber($path); &#125; &#125; closedir($handle);&#125; 4.文件操作1.拷贝文件​ copy( 来源地址，目标地址 ) 将目标文件拷贝到目标文件中（不支持目录拷贝） ​ copy(&#39;./01-file.php&#39;,&#39;./demo1/01-file.php&#39;); 2.创建目录​ mkdir( 目录路径 ) 在目标路径创建一个文件夹 ​ mkdir( 目录路径，0777，true ) 在目标路径创建多级目录文件夹 ​ mkdir(&#39;./x/y/z&#39;, 0777, true); 3.删除目录​ rmdir( 目录路径 ) 只能删除空文件夹 ​ rmdir(&#39;./x&#39;); 4.创建/删除文件​ touch( 文件名 ) 创建文件 ​ unlink( 文件名 ) 删除文件 ​ touch(&#39;./demo1/test.php&#39;); unlink(&#39;./demo1/test.php&#39;); 5.重命名/剪切文件​ rename( 旧文件名，新文件名 ) 修改目录，剪切 ​ rename(&#39;./test&#39;, &#39;./demo1/test.txt&#39;); #修改目录，剪切 ​ rename(&#39;./test.txt&#39;, &#39;./testxxx.txt&#39;); # 目录不变,重命名 5.文件编码问题Windows默认gbk编码，PHP默认utf-8编码，编码不一致时，会发生编码解析问题 ​ iconv( 源编码，目标编码，内容 ) ​ copy(iconv(&#39;utf-8&#39;,&#39;gbk&#39;,&#39;./递归.png&#39;),&#39;./xx.png&#39;) 6.baidu云盘递归遍历123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;百度云盘&lt;/title&gt; &lt;style&gt; table&#123;width: 500px;/*height: 60px;*/margin:20px auto;border-collapse:collapse;font-size: 14px;&#125; table tr:hover&#123;background: #f4fbff;&#125; table tr:hover th&#123;border-color: #cbedff;&#125; table tr:hover td&#123;border-color: #cbedff;&#125; table th&#123;text-align: left;border-bottom:1px solid #ccc;/*line-height: 30px;*/border-color: #999;&#125; table td&#123;border-bottom:1px solid #ccc;border-color: #999;&#125; .dir&#123;background:url(&apos;./Baidu/icon.png&apos;) -380px -627px;width: 26px;height: 26px;display:inline-block;vertical-align: middle;&#125; .file&#123;background:url(&apos;./Baidu/icon.png&apos;) -380px -627px;width: 26px;height: 26px;display:inline-block;vertical-align: middle;&#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;table&gt; &lt;tr&gt; &lt;th&gt;文件名&lt;/th&gt; &lt;th&gt;大小&lt;/th&gt; &lt;th&gt;修改日期&lt;/th&gt; &lt;/tr&gt;&lt;!-- &lt;tr&gt; &lt;td&gt;&lt;div class=&quot;dir&quot;&gt;&lt;/div&gt;我的卡包&lt;/td&gt; &lt;td&gt;xxx&lt;/td&gt; &lt;td&gt;xxxxxx&lt;/td&gt; &lt;/tr&gt; --&gt;&lt;?php $x=empty($_GET[&apos;path&apos;])?&apos;./demo1&apos;:$_GET[&apos;path&apos;]; getFileName($x);?&gt; &lt;/table&gt;&lt;/body&gt;&lt;/html&gt;&lt;?php function getFileName($dir)&#123; $handle=opendir($dir); // $file=readdir($handle); while(($file=readdir($handle))!=false)&#123; echo &apos;&lt;tr&gt;&apos;; if ($file==&apos;.&apos;||$file==&apos;..&apos;) &#123; continue; &#125; $path=$dir.&apos;/&apos;.$file; if (is_file($path)) &#123; echo &apos;&lt;td&gt;&lt;div class=&quot;file&quot;&gt;&lt;/div&gt;&apos;.$file.&apos;&lt;/td&gt;&apos;; echo &apos;&lt;td&gt;&apos;.filesize($path).&apos;&lt;/td&gt;&apos;; &#125; if (is_dir($path)) &#123; echo &quot;&lt;td&gt;&lt;div class=&apos;dir&apos;&gt;&lt;/div&gt;&lt;a href=&apos;?path=&#123;$path&#125;&apos;&gt;&#123;$file&#125;&lt;/a&gt;&lt;/td&gt;&quot;; echo &apos;&lt;td&gt; - &lt;/td&gt;&apos;; &#125; echo &apos;&lt;td&gt;&apos;.filemtime($path).&apos;&lt;/td&gt;&apos;; echo &apos;&lt;/tr&gt;&apos;; &#125; closedir($handle);&#125; ?&gt; 7.文件加载1.函数： ​ include &#39; 文件路径 &#39; #加载（当做关键字使用） 依赖 require &#39; 文件路径 &#39; ​ include( 文件路径 ) #加载（当做函数使用） 依赖 require( 文件路径 ) ​ include_once( 文件路径 ) #加载一次 依赖 require_once( 文件路径 ) ​ include_once &#39; 文件路径 &#39; #加载一次 依赖 require_once &#39; 文件路径 &#39; 2.作用： ​ 将文件A加载到文件B中，文件B从而可以使用文件A中的所有数据 ​ 相当于将文件A的所有代码复制到文件B中的 include / require 处 3.使用 ​ include &#39;./demo.php&#39;; require &#39;./demo.php&#39;; ​ include_once &#39;./demo.php&#39;; require_once &#39;./demo.php&#39;; 4.特性 ​ 1.include / require 可以重复加载 ​ 2.但被重复加载的文件内部，函数和常量会被重定义，报错 ​ 3.避免重复加载，可以通过include_once / require_once只加载一次 ​ 4.include 加载出错，不会终止程序，require 加载出错，立马终止程序 ​ 5.支持相对路径，盘符路径，不支持网址路径 8.文件内容操作函数1.向文件赋予内容​ file_put_contents(&#39;文件路径&#39;,&#39;文件内容&#39;)； ​ 若文件路径不存在，则自动创建；若路径存在，则先将文件大小截为0，再写入内容（覆盖） ​ 代码实例：file_put_contents(&#39;./test.txt&#39;,&#39;how are you?&#39;); 2.获取文件的所有内容​ file_get_contents(&#39;文件路径&#39;); ​ 支持全格式地址，若输入网址地址，则爬取跳转当前页面（只有外表，无功能） ​ 代码实例：echo file_get_contents(&#39;./test.txt&#39;); ​ echo file_get_contents(&#39;http://www.baidu.com&#39;); 3.打开一个文件​ fopen(&#39;文件路径&#39;，&#39;打开模式&#39;)； 返回值：资源 ​ #打开模式详解： ​ r 只读，指针指向文件开头，若文件不存在，报错 ​ w 只写，指针指向文件开头，若文件不存在，则自动创建，且大小截为0 ​ a 追加，指针指向文件末尾，若文件不存在，则自动创建 ​ + 增强，既可以读又可以写，但需要以上模式配合 ​ 代码实例： $handle=fopen(&#39;.test.txt&#39;,&#39;r&#39;); 4.读取内容​ fread(&#39;文件资源&#39;，&#39;字节&#39;); 读取资源，返回内容，每次读取指定字节数据 ​ 当函数读取资源超出资源范围时，返回空字符串 1234读取方式1： while( ($x=fread($handle,1)) !== &apos;&apos; )&#123; echo $x; &#125; 123读取方式2：echo fread($handle,11);echo fread($handle,filesize(&apos;./test.txt&apos;)); 5.写入内容​ fwrite(&#39;文件资源&#39;,&#39;内容&#39;) ​ 将内容写入目标文件，写入方式由 fopen() 的打开模式决定 ​ 代码实例： 1231.写入：$handle=fopen(&apos;./text.txt&apos;,&apos;w&apos;);fwrite($handle,&apos;MVP&apos;); #MVP 1232.追加：$handle=fopen(&apos;.text.txt&apos;,&apos;a&apos;);fwrite($handle,&apos;ADD&apos;); #MVPADD 1233.增强：r+$handle=fopen(&apos;./test.txt&apos;,&apos;r+&apos;); fwrite($handle,&apos;abc&apos;); #abcADD(覆盖前面的) 1234.增强：w+$handle=fopen(&apos;./test.txt&apos;,&apos;w+&apos;); fwrite($handle,&apos;def&apos;); #def(覆盖全部的) 1235.增强：a+$handle=fopen(&apos;./test.txt&apos;,&apos;a+&apos;); fwrite($handle,&apos;GG&apos;); #defGG(覆盖全部的) 6.关闭资源​ fclose($handle); 释放内存，节省空间 9.文件上传1.文件上传限制： 表单限制 MAX_FILE_SIZE HTML页面自定义大小，一旦超过，error=2 ​ 可通过F12跳过限制（一般都是通过隐藏域MAX_FILE_SIZE修改赋值） post协议限制 post_max_size 一旦超过8M，$_FILES直接为空 服务器限制 upload_max_filesize 一旦超过2M，error=1 2.文件上传相关函数​ $_FILES 专门用于接收上传文件，返回结果为数组 ​ $is_uploaded_file( 临时文件地址 ) 检测是否通过post发送，返回bool值 ​ uniqid（） 基于一微秒产生的唯一ID，适合低频率 ​ file_exists( ) 文件是否存在，返回bool ​ move_uploaded_file( 临时文件，目标文件 ) 移动临时文件到存储目录 123456789array (size=1) &apos;icon&apos; =&gt; array (size=5) icon =&gt; file表单的name名 name =&gt; 上传的文件名 type =&gt; 上传的文件类型 tmp_name =&gt; 临时文件 error =&gt; 错误号 0:没错 非0:有错 size =&gt; 上传的文件大小 ​ ​ 上传文件初版： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657function upload()&#123; #1.检测文件是否符合服务器大小限制（$_FILES是否为空） $key=key($_FILES); if(is_null($key))&#123; #若超过8M，错误号2，post协议不通过，FILES数组为空 echo &apos;文件太大，上传失败&apos;; echo &lt;meta http-equiv=&quot;refresh&quot;content=&quot;3;url=&apos;.$_SERVER[&apos;HTTP_REFERER&apos;].&apos;&quot;&gt;; die; #回到上一级 &#125; #2.获取错误号，输出错误信息 $error=$_FILES[$key][&apos;error&apos;]; #获取当前错误号 if($error!=0)&#123; #若错误号不为0，即上传失败，输出原因 switch($error)&#123; case1:echo &apos;文件太大，上传失败&apos;;break; case2:echo &apos;文件太大，上传失败&apos;;break; case3:echo &apos;网络中断&apos;;break; case4:echo &apos;未上传文件&apos;;break; case6:echo &apos;服务器繁忙（服务器存储目录丢失）&apos;;break; case7:echo &apos;服务器繁忙（权限不足）&apos;;break; &#125; echo &lt;meta http-equiv=&quot;refresh&quot;content=&quot;3;url=&apos;.$_SERVER[&apos;HTTP_REFERER&apos;].&apos;&quot;&gt;; die; &#125; #3.检测是否是post上传过来的 $tmp=$_FILES[$key][&apos;tmp_name&apos;]; #获取缓存目录 if(!is_uploaded_file($tmp))&#123; #是否通过post发送 echo &apos;非法上传&apos;; echo &lt;meta http-equiv=&quot;refresh&quot;content=&quot;3;url=&apos;.$_SERVER[&apos;HTTP_REFERER&apos;].&apos;&quot;&gt;; die; &#125; #4.检测文件类型是否符合要求 $type=strtok($_FILES[$key][&apos;type&apos;],&apos;/&apos;); #获取文件类型 $allowType=[&apos;image&apos;]; #准备允许的类型 if(!in_array($type,$allowType))&#123; echo &apos;上传类型不符合要求&apos;； echo &lt;meta http-equiv=&quot;refresh&quot;content=&quot;3;url=&apos;.$_SERVER[&apos;HTTP_REFERER&apos;].&apos;&quot;&gt;; &#125; #5.设计新的文件名（唯一）(格式：20190423xxxx.jpg) $suffix=strrchr($_FILES[$key][&apos;name&apos;],&apos;.&apos;); #4.1获取扩展名 $filename=date(&apos;Ymd&apos;).uniqid().$suffix; #产生唯一ID #6.设置存储目录 upload/年/月/日/ $dir=&apos;upload/&apos;.date(&apos;/Y/m/d/&apos;); if(!file_exists($dir))&#123; mkdir($dir,0777,true); &#125; #7.移动临时文件到存储目录 if(move_upload_file($tmp,$dir.$filename))&#123; echo &apos;上传成功&apos;; &#125;else&#123; echo &apos;上传失败&apos;; &#125;&#125; ​ 上传文件完全版： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879/** * upload 单文件上传 * @param string $saveDir 存储目录 * @param array $allowType 允许类型 * @return string 错误信息 * @return array 新的文件名 */function upload($saveDir=&apos;uploads/&apos;,$allowType=[&apos;image&apos;])&#123; #1.检测文件是否符合服务器大小限制（$_FILES是否为空） $key=key($_FILES); if(is_null($key))&#123; #若超过8M，错误号2，post协议不通过，FILES数组为空 return &apos;文件太大，上传失败&apos;; #返回信息 &#125; #2.获取错误号，输出错误信息 $error=$_FILES[$key][&apos;error&apos;]; #获取当前错误号 if($error!=0)&#123; #若错误号不为0，即上传失败，输出原因 switch($error)&#123; case 1:return &apos;文件太大，上传失败&apos;;break; case 2:return &apos;文件太大，上传失败&apos;;break; case 3:return &apos;网络中断&apos;;break; case 4:return &apos;未上传文件&apos;;break; case 6:return &apos;服务器繁忙（服务器存储目录丢失）&apos;;break; case 7:return &apos;服务器繁忙（权限不足）&apos;;break; &#125; &#125; #3.检测是否是post上传过来的 $tmp=$_FILES[$key][&apos;tmp_name&apos;]; #获取缓存目录 if(!is_uploaded_file($tmp))&#123; #是否通过post发送 return &apos;非法上传&apos;; &#125; #4.检测文件类型是否符合要求 $type=strtok($_FILES[$key][&apos;type&apos;],&apos;/&apos;); #获取文件类型 if(!in_array($type,$allowType))&#123; return &apos;上传类型不符合要求&apos;； &#125; #5.设计新的文件名（唯一）(格式：20190423xxxx.jpg) $suffix=strrchr($_FILES[$key][&apos;name&apos;],&apos;.&apos;); #4.1获取扩展名 $filename=date(&apos;Ymd&apos;).uniqid().$suffix; #产生唯一ID #6.设置存储目录 upload/年/月/日/ $dir=$saveDir.date(&apos;/Y/m/d/&apos;); if(!file_exists($dir))&#123; mkdir($dir,0777,true); &#125; #7.移动临时文件到存储目录 if(move_uploaded_file($tmp,$dir.$filename))&#123; return [$filename]; &#125;else&#123; return &apos;上传失败&apos;; &#125;&#125;$result=upload();if(is_array($result))&#123; notice(&apos;上传成功&apos;,&apos;http://www.baidu.con&apos;);&#125;else&#123; notice($result);&#125;/** * notice 提示信息 * @param string $info 提示信息 * @param string $url 提示之后的跳转地址 * @param integer $time 几秒后进行跳转 */function notice($info,$url=null,$time=3)&#123; echo $info; if($is_null($url))&#123; $url=$_SERVER[&apos;HTTP_REFERER&apos;]; &#125; echo &quot;&lt;meta http-equiv=&apos;refresh&apos; content=&apos;&#123;$time&#125;; url=&#123;$url&#125;&apos;&gt;&quot;; die;&#125; 10.文件下载1.步骤​ 1.接收下载的文件名 12$name = $_GET[&apos;name&apos;];$suffix=strchr($name,&apos;&apos;); ​ 2.凑完整的路径 1$path = &apos;./download/&apos;.$name; ​ 3.准备下载之后的名字 12$filename=str_shuffle(md5($name)).$suffix;header(&quot;content-disposition:attachment;filename=&#123;$filename&#125;&quot;); ​ 4.读取文件内容 1readfile($path);]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>后端</tag>
        <tag>文件操作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP接口开发常用API]]></title>
    <url>%2F2018%2F02%2F25%2FAPI%2F</url>
    <content type="text"><![CDATA[1 接口 API接口一 返回 json 新闻接口 API地址 天行数据 http://api.tianapi.com/keji/?key=你的APIKEY&amp;num=20 请求参数: 必须参数: apikey: 必须有API密钥(url参数) num: 返回文章数量 默认10(url参数) 可选参数: rand: 是否随机获取 默认0为不随机 word: 关键字 page: 分页 默认1接口二 返回 xml 最新影讯信息 API 地址 聚合数据文档: https://www.juhe.cn/docs/api/id/942 curlcurl_init()curl_setopt()curl_exec()curl_close() 3.1 json处理json_decodejson_encode 3.2 xml处理 parseXML (XML解析器) XMLReader DOM SimpleXML 4 框架处理接口https://blockchain.info/api/exchange_rates_api 5 范例1234567891011121314151617181920212223242526272829303132eg1 -- json 数据处理: // CURL $curl = curl_init(); // var_dump($curl); $apikey = &apos;请使用你自己的APIKEY&apos;; // url 编码数据 $word = urlencode(&apos;大米&apos;); // var_dump($word);exit; $url = &apos;http://api.tianapi.com/keji/?key=&apos;.$apikey.&apos;&amp;num=20&amp;word=&apos;.$word; // URL 设置 curl_setopt($curl, CURLOPT_URL, $url); // 将curl_exec()获取的信息以字符串返回，而不是直接输出。 curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE); // CURL 执行 $data = curl_exec($curl); curl_close($curl); // 判断 处理结果 $data... // var_dump($data); // 处理 JSON 数据 $jsonObj = json_decode($data); // var_dump($jsonObj); // 提取文章信息 $newslist = $jsonObj-&gt;newslist; // var_dump($newslist); 1234567891011121314151617181920212223242526eg2 -- xml数据处理:$movieName = empty($_GET[&apos;m&apos;])?&apos;&apos;:$_GET[&apos;m&apos;];$movie = urldecode($movieName);$key = &apos;请使用自己的APIKEY&apos;;$url = &apos;http://op.juhe.cn/onebox/movie/video?key=&apos;.$key.&apos;&amp;dtype=xml&amp;q=&apos;.$movie;// CURL$curl = curl_init();// URL 设置curl_setopt($curl, CURLOPT_URL, $url);// 将curl_exec()获取的信息以字符串返回，而不是直接输出。curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);// CURL 执行$data = curl_exec($curl);$obj = simplexml_load_string($data);echo &apos;&lt;pre&gt;&apos;; // print_r($data); // print_r($obj); // var_dump($obj);echo &apos;&lt;/pre&gt;&apos;;curl_close($curl); API平台阿里云云市场: https://market.aliyun.com/天行数据: https://www.tianapi.com/聚合数据: https://www.juhe.cn/易源数据: https://www.showapi.com/百度API Store平台: http://apistore.baidu.com/七牛云: https://www.qiniu.com阿里大于(通信): https://dayu.aliyun.com/容联云通讯: http://www.yuntongxun.com/ 地图SDK:高德地图开放平台: http://lbs.amap.com/百度地图开放平台: http://lbsyun.baidu.com/ BAT:微信开放平台: https://open.weixin.qq.com/腾讯开放平台: http://open.qq.com/百度开发者中心: https://developer.baidu.com/淘宝开放平台: http://open.taobao.com/阿里云开发者平台: https://dev.aliyun.com/search.html 支付接口:支付宝开放平台(蚂蚁金服): https://open.alipay.com微信支付: https://pay.weixin.qq.com/wiki/doc/api/index.html 登录/应用类:QQ互联: https://connect.qq.com新浪微博开放平台: http://open.weibo.com/优酷开放平台: https://open.youku.com/饿了么开放平台: http://openapi.eleme.io/百度AI开放平台: https://ai.baidu.com/讯飞开放平台: http://www.xfyun.cn/百度翻译开放平台: http://api.fanyi.baidu.com/ 工具:百度富文本编辑器(UEditor):http://ueditor.baidu.com/website/ECharts 百度Javascript的图表库:http://echarts.baidu.com/蚂蚁金服数据可视化:https://antv.alipay.com/zh-cn/index.htmlBizCharts 数据可视化:https://github.com/alibaba/BizCharts PS. 精美图标 支持搜索http://www.easyicon.net/ 极验验证http://www.geetest.com/ Amaze UIhttp://amazeui.org/ MUIhttp://dev.dcloud.net.cn/mui/ zui性感的框架http://www.zui.sexy Layuihttp://www.layui.com/doc/http://layer.layui.com/]]></content>
      <categories>
        <category>接口开发</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>后端</tag>
        <tag>接口</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 简介06-错误处理]]></title>
    <url>%2F2018%2F01%2F17%2FPHP%20%E5%9F%BA%E7%A1%8006-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[1.错误处理1.分类​ PHP的错误编码： ​ 1.error错误 错误号:1 ​ 致命错误，一旦碰到error错误，程序立马终止 ​ 2.warning错误 错误号：2 ​ 警告错误，一旦碰到warning错误，程序会给出错误警告，但不会终止程序的执行 ​ 3.notice错误 错误号：8 ​ 提示错误，可能是错误，也可能不是错误，不会终止程序的执行 2.错误的屏蔽在上线项目中，不允许出现任何错误 1.方法一：通过错误抑制符@来屏蔽当前某一变量的错误 2.方法二：（推荐）通过error_reporting函数来屏蔽函数之后的错误 该函数一般写在程序的最前面 影响范围：该文件 error_reporting(E_ALL) 显示所有的错误 error_reporting(E_WARNING) 只显示warning级错误 error_reporting(E_NOTICE) 只显示notice级错误 error_reporting(E_ERROR) 只显示error级错误，一般屏蔽不掉 error_reporting(E_ALL ^E_NOTICE) 除了notice级错误，其余都报 error_reporting(E_ALL &amp; ~E_NOTICE) error_reporting(E_ALL ^E_EARNING) 除了warning级错误，其余都报 error_reporting(E_ALL &amp; ~E_WARNING) 3.方法三：通过修改配置文件，来屏蔽错误 影响范围：整个服务器 配置文件位置：wamp\bin\apache\apache2.4.18\bin\php.ini 注意：修改任意配置后，都需要重启服务器 123// 修改内容2:// error_reporting = 值 该值与 屏蔽2的函数值一模一样 4.方法四：通过函数临时修改配置文件ini_get() 或 ini_set() 影响范围：当前文件 1234567891011121314151617181920var_dump( ini_get(&apos;display_errors&apos;) );ini_set(&apos;display_errors&apos;, 0);ini_set(&apos;display_errors&apos;, &apos;Off&apos;);ini_set(&apos;display_errors&apos;, &apos;On&apos;);var_dump( ini_get(&apos;display_errors&apos;) );# 32767 E_ALL# 1 E_ERROR# 2 E_WARNING# 8 E_NOTICEvar_dump( ini_get(&apos;error_reporting&apos;) );ini_set(&apos;error_reporting&apos;, 1);ini_set(&apos;error_reporting&apos;, E_ERROR);ini_set(&apos;error_reporting&apos;, E_WARNING);ini_set(&apos;error_reporting&apos;, E_NOTICE);var_dump( ini_get(&apos;error_reporting&apos;) );echo $a;echo strrev(); 3.PHP错误日志日志函数：error_log(日志信息，日志类型，目标文件) 日志类型：如果是写入日志，选择3 目标文件：当日志类型为3，才需要第三个参数 12345678910111213141516171819202122232425262728$a = 10;$b = 0;if ($b == 0) &#123; // 日志信息 $ip = $_SERVER[&apos;REMOTE_ADDR&apos;]; # 客户IP $time = date(&apos;Y/m/d H:i:s&apos;); # 访问时间 $method = $_SERVER[&apos;REQUEST_METHOD&apos;]; # 访问方式 $info = &apos;除数不能为0&apos;; # 错误信息 $address = __FILE__; # 错误文件地址 $line = __LINE__; # 当前行号 # 记事本的换行: \r\n 先回车再换行 $log = &quot;&#123;$ip&#125; - - [&#123;$time&#125;] &#123;$method&#125; &#123;$info&#125; in &#123;$address&#125; on line &#123;$line&#125; \r\n&quot;; error_log($log, 3, &apos;./log.txt&apos;); // 自定义报错 // trigger_error(报错信息, 错误类型) // E_USER_ERROR 用户自定义的致命错误 // E_USER_WARNING 用户自定义的警告错误 // E_USER_NOTICE 用户自定义的提示错误 trigger_error($info, E_USER_NOTICE);&#125;else&#123; echo $a/$b;&#125; 3.逻辑错误的处理 逻辑错误：既不报错，也不终止程序，主要因为设计错误 两种缩小排错范围的方法： 1.断点法：通过die/exit中断程序的执行，在die之前输出相关变量，查看是否与预想数值符合 2.注释法：通过注释局部代码，查看结果是否有变化]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>后端</tag>
        <tag>错误处理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 简介05-数组/正则/时间函数]]></title>
    <url>%2F2018%2F01%2F05%2FPHP%20%E5%9F%BA%E7%A1%8005-%E6%95%B0%E7%BB%84.%E6%AD%A3%E5%88%99.%E6%97%B6%E9%97%B4%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[1.数组1.数组1.分类 ​ 索引数组：键为 int ​ 关联数组：键为 string ​ 混合数组：键为 混合类型（字母，数字，汉字，字符串….） 2.键： ​ 别名：下标，偏移量，索引 3.值： ​ 可以为任意类型 4.格式： ​ $数组名[ 键 ] = 值; ​ $数组名 = [ 键1 =&gt; 值1，键2 =&gt; 值2，键3 =&gt; 值3，... ]; 5.索引数组 ​ 1）数组的键为一系列有一定规律的数字组成，当键不是 int 型时，会强制转化为 int 。 ​ 2）当没有指定键时：默认从0开始；从已有记录过的最大键开始+1； 6.关联数组 ​ 1）数组的键为字符串组成，没有特别的顺序和规律 ​ 2）如下一些键值可能会产生同样的效果： ​ # 1 = 1.xxx =true ​ # 0 = 0.0 = &#39;0&#39; = false ​ # null = 空字符串 = 未定义变量 ​ # 非法键：数组，对象 ​ # 资源虽然可以作为键，但是不推荐 ​ 键既有数字，又有字符串，一般称之为混合数组 7.多维数组 ​ 数组间发生嵌套关系，即可称之为多维数组 ​ 多维数组的操作，需要操作几维数组，就需要几个[ ] 12345$name=[ [&apos;成龙&apos;, &apos;洪金宝&apos;, &apos;李连杰&apos;, &apos;周润发&apos;], [&apos;易筋经&apos;, &apos;洗 髓经&apos;, &apos;金钟罩&apos;, &apos;童子功&apos;], [&apos;象猴得度&apos;, &apos;普度众生&apos;, &apos;割肉喂鹰&apos;, &apos;佛说前生&apos;], ]; 另一个写法： 1$name=[&apos;a&apos;=&gt;[1,2,3,4,5,],&apos;b&apos;=&gt;[2,3,4,5,6,6]]; 8.遍历数组 1.索引遍历 for 对于键为有规则的数字，可以用索引遍历 12345$name = [&apos;貂蝉&apos;, &apos;西施&apos;, &apos;王昭君&apos;, &apos;杨玉环&apos;]; for($i=0; $i&lt;4; $i++)&#123; echo $name[$i].&apos; &apos;; &#125; var_dump($name); 2.指针遍历 point 对于没有规则的数字键，是很难通过for遍历出来 常用函数： ​ key( ) 返回当前指针所指向的键 ​ current( ) 返回当前指针所指向的值 ​ 相对移位： ​ next( ) 下移一位 ​ prev( ) 上移一位 ​ 绝对移位： ​ reset( ) 指针直接指向数组的第一个键值对 ​ end( ) 指针直接指向数组的最后一个键值对 注意点： 当使用 next 和 prev 移出范围之外时，无法通过next和prev再移动回来，返回键为 null ，值为 false。 一般使用键为null来作为遍历终止条件 12345$name = [4=&gt;&apos;貂蝉&apos;, 1=&gt;&apos;西施&apos;, 99=&gt;&apos;王昭君&apos;, 12=&gt;&apos;杨玉环&apos;]; // 利用指针 来遍历数组 for( ; !is_null( key($name) ) ; next($name) )&#123; echo current($name).&apos; &apos;; &#125; 3.指针遍历 each each（）函数自带current+key+next 123456$name = [4=&gt;&apos;貂蝉&apos;, 1=&gt;&apos;西施&apos;, 99=&gt;&apos;王昭君&apos;, 12=&gt;&apos;杨玉环&apos;]; for( ; $x = each($name) ; )&#123; echo $x[0].&apos;=======&gt;&apos;.$x[1].&apos;&lt;br&gt;&apos;; &#125; echo &apos;&lt;hr&gt;&apos;; #输出形式：0=key;1=value。 4.扩展循环结构： foreach 格式： ​ foreach( 数组 as 键 =&gt; 值 ){ 代码块 } 简化版：当不需要使用键时 ​ foreach( 数组 as 值 ）{ 代码块 } 12345$name = [4=&gt;&apos;貂蝉&apos;, 1=&gt;&apos;西施&apos;, 99=&gt;&apos;王昭君&apos;, 12=&gt;&apos;杨玉环&apos;]; foreach($name as $k =&gt; $v)&#123; echo $k.&apos;=======&gt;&apos;.$v.&apos;&lt;br&gt;&apos;; &#125; 2.预定义数组1.$GLOBALS 存储全局环境中所有的可用变量 2.$_GET 接收所有以get方式传输的值 3.$_POST 接收所有以post方式传输的值 4.$_FILES 专门用于接收上传文件 5.$_COOKIE 存储浏览器中的cookie值 6.$_SESSION 存储服务器中的session值（不重复登录） 7.$_REQUEST 同时接收get，post，cookie 的值 8.$_SERVER 存储服务器相关的信息，包含地址，IP，服务器环境等 12345678var_dump($_SERVER) # $_SERVER[&apos;HTTP_HOST&apos;] 主机地址 # $_SERVER[&apos;HTTP_USER_AGENT&apos;] 客户端的信息(设备, 浏览器信息) # $_SERVER[&apos;REMOTE_ADDR&apos;] 客户端的IP地址 (常见面试题) # $_SERVER[&apos;HTTP_REFERER&apos;] 获取上一级来源地址(你是从哪个页面来的) # $_SERVER[&apos;REQUEST_URI&apos;] 脚本地址(带参数) # $_SERVER[&apos;QUERY_STRING&apos;] 获取参数 # $_SERVER[&apos;SCRIPT_NAME&apos;] 脚本地址(不带参数) 9.当 method=get , action带参数时，action 的参数会被全部抛弃 ​ 解决方案：将 action 的参数通过隐藏域进行传递 123456&lt;form action=&quot;http://localhost/s86/0416/09-server.php?name=999&amp;age=99&quot; method=&quot;get&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;age&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;name&quot; value=&quot;999&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;age&quot; value=&quot;99&quot;&gt; &lt;input type=&quot;submit&quot;&gt;&lt;/form&gt; 10.上传文件 三个必要条件： file表单必须要有name，用以在PHP端接收内容 form表单中 method = post form表单中 enctype=multipart/form-date 单文件上传： ​ &lt;input type=&quot;file&quot; name=&quot;xxx&quot;&gt; 多文件上传： ​ 1.需要在name值得最后面加 [ ]，形成数组接收多内容 ​ 2.file 添加 multiple 属性 3.字符串数组把字符串当做数组来使用 123456789101112131415161718192021$str = &apos;i love you&apos;; echo $str[0]; echo $str[1]; echo $str[2]; echo $str[3]; // ... echo $str[9]; # 已经超出字符串范围 echo @$str[10]; var_dump( @$str[10] ); # 空字符串 echo &apos;&lt;hr&gt;&apos;; // for($i=0; $i&lt;10; $i++)&#123; // echo $str[$i]; // &#125; for($i=0; @$str[$i] !== &apos;&apos; ; $i++)&#123; echo $str[$i]; &#125; 2.正则表达式1.定义：正则表达式就是用某种模式去匹配字符串的公式 2.功能：主要用于字符串的查询，替换操作 3.组成：由正规字符和一些特殊字符组成 4.特征： 小而强大 的控制源（正则集的代数） 存储大 读取快 1正则语法规则：包含：定界符，原子，元字符，模式修正符 2.定界符：表示一个正则表达式的开始和结束，有以下三种方式： / [0-9] / 一对斜线 #[0-9]# 一对井号 {[0-9]} 一对大括号 3.原子：表达式中代表一个匹配单元的个体，分为可见原子和不可见原子 不可见原子： 换行符 \n 回车 \r 制表符 \t 空格 其他不可见符号 4.元字符1）原子的筛选方式： | 匹配两个或多个分支选择 [ ] 匹配方括号中的任意一个原子 [^] 匹配除了方括号中的原子之外的任意字符 2）原子的集合（将某一类原子归类简化） . 匹配除换行符之外的任意字符 \d 匹配任意一个十进制数字，即[0-9] \D 匹配任意一个非十进制数字，即[^0-9] \s 匹配一个不可见原子，即[\n\t\r] \S 匹配一个可见原子，即[^\n\t\r] \w 匹配一个数字、字母或下划线，即[0-9a-zA-Z_] \W 匹配一个非数字、字母或下划线，即[^0-9a-zA-Z_] 3）量词（查找字符串中某个原子连续出现多少次） {n} 表示其前面的原子出现n次 {n,} 表示其前面的原子至少出现n次 {n,m} 表示其天免得原子出现了n~m次 * 匹配0次，1次或者多次其前的原子，即{0,} + 匹配1次或者多次其前的原子，即{1,} ? 匹配0次或者1次其前的原子，即{0,1} 4）便捷控制，模式单元和模式选择符 ^ 匹配字符串开始的位置 $ 匹配字符串结尾的位置 ( ) 匹配其中的整体为一个原子 (|) 匹配其中的两个或者更多的选择之一，分隔多选一模式 5.模式修正符 贪婪匹配 .* 匹配结果存在歧义时取其长（默认） 懒惰匹配 U 匹配结果存在歧义时取其短，同.*? 忽略空白 x 匹配结果忽略空白 大小写匹配 i 匹配结果不区分大小写 中文适配 u 把中文汉字当做一个字符计算 6.正则的基本使用 正则在PHP中就是字符串类型 1.函数： 1）preg_match(正则，字符串 [,匹配结果]) （单词匹配函数） ​ 返回值：匹配的次数（0-失败；1-成功） 2）preg_match_all(正则，字符串 [,匹配结果]) （全部匹配函数） ​ 返回值：字符串中匹配字符的个数 3）preg_replace(正则，替换值，对象) （替换匹配字符串函数） ​ 返回值：替换之后的对象 4）preg_grep(正则，数组) （过滤函数） ​ 返回值：符合过滤条件的字符串 2.后向引用 ​ \1 代表将第一个（）内的内容复制到 \1 所在的位置 ​ \2 代表将第一个（）内的内容复制到 \2 所在的位置 ​ \n 代表将第一个（）内的内容复制到 \n 所在的位置 3.分组概念：（）模式单元 ​ 在正则中，一旦匹配（）的内容，会产生两个效果 ​ 1)将（）内的内容当成一个整体，以一个大原子的形式看待 ​ 2)将（）内的内容送入子模式匹配 ​ 参与子模式匹配，方便后向引用 若只是单纯想将（）内容当成一个整体，不想让（）内容参与子模式，可以取消子模式：（?:正则内容） 4.中文 中文在PHP中默认占3位，模式修正符 u 可以将中文当做一位. 若要统计字符串中有多少汉字，可以匹配 \x{4e00}-\x{9fa5} . 3.时间函数1.时区​ 获取时区：date_default_timezone_get() ​ 设置时区：date_default_timezone_set() 默认时区为UTC时区，世界标准时间（英国 格林威治时间） 中国时区为参数 PRC 2.Unix时间戳 time()​ time( ) 获取的时间为自1970年一月一日开始到现在的秒数 3.时间戳格式化 date()​ date(格式，时间戳) 格式：（严格区分大小写） 12345678910111213// Y 4位年份// y 2位年份// M 英文月份// m 数字月份// w 中文周几// W 中文第几周// D 英文周几// d 天// H 24小时// h 12小时 配合a// i 分钟// s 秒数// z 第几天 格式中除了字母外，其他字符都是原样输出 4.创建固定时间点 mktime()​ mktime(时,分,秒,月,日,年) 创建的时间点格式也是Unix时间戳 5.英文时间命令 strtotime()​ strtotime() 格式： 123456//now 此刻时间//yesterday 昨天//tomorrow 明天//last year 上一年//-2 day 前两天//2 year 两年后 时间上限：2037-12-31 23:59:59 6.延迟 sleep()​ sleep(秒数) 7.微秒 microtime()​ microtime() 将时间戳微秒数显示出来 ​ 参数：false（默认）微秒数在前，较精确 ​ true 将微秒数置后，方便参数计算]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 简介04-函数]]></title>
    <url>%2F2017%2F12%2F27%2FPHP%20%E5%9F%BA%E7%A1%8004-%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[1.函数 function1.定义：​ 用来执行特定任务，实现某种功能 2.分类：​ 系统函数：PHP自带的函数，如数学，字符串，数组，时间… ​ 自定义函数：用户根据具体的需求来设计的函数 3.自定义函数​ 1.格式： ​ function 函数名（参数1，参数2，...）{代码块} ​ 2.注意事项： ​ 1） function 关键字不能少； ​ 2）函数名不区分大小写； ​ 3）参数（也称形参）可以写也可以不写，具体根据需求决定； ​ 4）代码块：函数功能的主要部分； 4.特性： 函数不调用不会自动执行 没有执行函数时，依旧会检测里面的语法，若有错误，程序报错 函数互不影响，可以互相调用 调用函数和定义函数的先后顺序没有要求 5.调用函数​ 函数名（）; 6.函数名1 函数的命名规范：​ 由数字，字母和下划线组成，但不能由数字开头 2 函数名不区分大小写3 函数命名要求​ 有意义，以提高可读性（动词＋名词） 4 函数命名方式：1.小驼峰命名法： ​ 从第二个单词开始，首字母大写 getUserName 2.大驼峰命名法（帕斯卡命名法） ​ 每个单词的首字母都大写 GetUserInfo 3,下划线命名法 ​ 每个单词之间用下划线隔开 var_dump 5 函数名不允许重复7.返回值 return1.关键字： ​ return 2.格式： ​ return 内容 3.流程： ​ 当程序执行到 return 时，马上将“内容”返回到调用函数的地方 4.返回状态： 自然返回：函数中的代码全部执行完，自动回到调用函数的地方 没有返回值时，强行接收，只能得到null 提前返回：函数中执行了return，马上结束函数，并返回到调用函数的地方 当程序执行到return时，立马返回，带了一个内容，如果想带两个变量回去，可以将多个变量存入同一个数组中，并return数组。 8.参数1.定义： ​ 参数分为实参（实际参数）和形参（形式参数） ​ 实参—— argument ，在调用函数时给的具体参数 ​ 形参——parameter ，在定义函数时给的某一类参数形式 2.参数接收 1）实参个数=形参个数 （匹配完美） ​ 实参与形参会一一对应，相互匹配接收 2）实参个数&gt;形参个数 ​ 和形参匹配的前几个实参一一接收，后面多余的实参会被抛弃 3）实参个数&lt;形参个数 ​ 多余的形参通常会采用之前设置的默认值，若没有默认值，则会被当做未定义变量 9.可变长度参数的函数当实参个数为一个不确定值时，称为可变长度参数的函数 接收所有实参（数组形式） func_get_args() 单独获取键为N的实参 func_get_arg(N) 统计一共有多少个实参 func_num_args() 当不知道有多少实参时，形参一个都不要写，用上述函数接收数据 1234567891011// 需求:// 根据传入的多个实参, 进行求和function add()&#123; $sum=0; $count=$func_num_args(); for($i=0;$i&lt;$count;$i++)&#123; $sun+=func_get_arg($i); &#125; return $sum;&#125; 10.函数设计准备1.设计函数名：​ 具体功能描述 2.考虑参数设置： 功能中需要输入几个参数 参数需不需要设置默认值 3.核心功能​ 其中缺乏的数据，可以先模拟出来，保证结果是有效的 4.补充​ 缺什么补什么，把模拟数据扩展为灵活数据 123456789//需求：获取 x~y 之间的偶数function getEven($x,$y)&#123; for($i=$x;$i&lt;$y;$i++)&#123; if($i%2 == 0)&#123; $result[]=$i; &#125; &#125;return $result;&#125; 2.变量作用域1.定义： ​ 变量能够作用的区域。 2.分类 全局变量：在函数外部声明的变量 局部变量：在函数内部声明的变量 3.规则： 全局变量无法直接在局部作用域中使用 局部变量不能直接在全局作用域中使用 12345678$a=100; #全局变量function demo()&#123; $b=200; #局部变量 echo $a; #失败&#125;demo(); #null，函数内部声明的变量，在函数结束时，所有的值会被释放echo $b #失败，输出时，会输出全局$b，若找不到就报错 4.改变作用域 将全局变量作用域扩展至局部变量： 通过超全局数组获得全局变量， $GLOBALS[&#39;a&#39;] 用于存储所有全局可用的变量 将局部变量作用域扩展至全局； 通过使用 global 给局部变量赋予令牌，使其能够在全局中使用。 5.常量 12345678910const CHINA=&apos;zhongguo&apos;; #全局定义常量function demo()&#123; echo CHINA; #正常输出，可以直接在局部中使用 const NAME=&apos;cheng&apos;; #不能在函数中通过const定义局部常量 define(&apos;AGE&apos;,20); #可以用define( )定义成功，但不推荐 echo AGE&#125;demo();echo AGE; 小结：常量在本质上是没有作用域的。 6.静态变量 ​ 1.定义：在函数中，被声明为静态变量的值，函数执行结束后不会被释放，而是在下一次调用同函数时，直接使用上一次的静态值结果。 ​ 2.关键字： static ​ 3.多个不同函数中，出现相同的静态变量，这些静态变量互不影响。 12345678function demo()&#123; static $num = 10; # 静态初始值 echo $num.&apos;&lt;br&gt;&apos;; $num++;&#125;demo(); #10demo(); #11]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 简介03-运算符/流程控制]]></title>
    <url>%2F2017%2F12%2F13%2FPHP%20%E5%9F%BA%E7%A1%8003-%E8%BF%90%E7%AE%97%E7%AC%A6.%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%2F</url>
    <content type="text"><![CDATA[1. 运算符 OperationPHP中运算符主要有以下七种： 算术运算符 自增/自减运算符 赋值运算符 比较运算符 拼接运算符 逻辑运算符 三元运算符 1.算术运算符：​ 加 减 乘 除 取模（取余） ​ + - * / % ​ 取模（%）详解： ​ 1)普通取模： 123var_dump(5%2); #1var_dump(1%2); #1var_dump(2%2); #0 ​ 2)高阶取模 ​ ①取模的正负：取决于被除数的正负 1234var_dump(5%2); #1var_dump(5%-2); #1var_dump(-5%2); #-1var_dump(-5%-2); #-1 ​ ​ ②取模结果的范围：x~y 12345678var_dump(0%3); #0 # %3var_dump(1%3); #1var_dump(2%3); #2var_dump(3%3); #0var_dump(4%3); #1var_dump(5%3); #2var_dump(6%3); #0var_dump(7%3); #1 # %3的结果永远在0~2之间，都小于3 ​ 12345678var_dump(0%5); #0 # %5var_dump(1%5); #1var_dump(2%5); #2var_dump(3%5); #3var_dump(4%5); #4var_dump(5%5); #0var_dump(6%5); #1var_dump(7%5); #2 # %x的结果永远在0~x-1之间，都小于x ​ ​ 若需求2~5，如何才能达到需求： 1234 0 ~ ？ #？=5-2=3 0~3为%4的结果+ 2----------------- 2 ~ 5 #即要达到2~5的结果，需要%4+2 ​ ​ 推理到x~y，则有：%(y-x+1)+x 1234 0 ~ ? # ?=y-x 为%[(y-x)+1]的结果+ x---------------- x ~ y # 即要达到x~y的结果，需要%（y-x+1）+x ​ 2.拼接运算符 string1.符号： ​ . 小数点 2.作用 ： ​ 拼接变量与字符串 / 拼接变量与变量 3.实例： 1234567$a=&apos;winter&apos;;$b=&apos;fall&apos;;$c=&apos;winter fall is the home of arya&apos;; $c=&apos;$a $b is the home of arya&apos;; #不识别，显示为$a $b$c=$a.&apos; &apos;.$b.&apos; is the home of arya&apos;; #正常显示echo $c; 3.赋值运算符 equal主要有以下几种赋值运算符： ​ 变量=值 赋值（先运算=右边的，再运算=左边的） ​ 变量+=值 变量=变量+值​ 变量-=值 变量=变量-值​ 变量*=值 变量=变量*值​ 变量/=值 变量=变量/值​ 变量%=值 变量=变量%值​ 变量.=值 变量=变量.值 4.比较运算符 compare​ 1.比较的结果都是布尔值（bool） ​ 2.运算符： ​ &gt; &gt;= 大于，大于等于 ​ &lt; &lt;= 小于，小于等于 ​ == 等于 （判断=两端的值是否相等） ​ === 全等于 （判断两边的值和数据类型是否全部相等） ​ != 不等于 （判断两边的值是否不相等） ​ !== 全不等于 （判断两边的值和数据类型是不是都不相等） 5.逻辑运算符 logic 类型 运算符 运算规则 逻辑与 &amp;&amp; 两边全真才是真,一边为假即为假 逻辑或 || 一边为真即是真，两边为假才是假 逻辑非 ！ 真即是假，假即是真 6.自增/自减 increment​ 1.自增运算符：++ ​ 2.自减运算符：-- ​ 3.易混乱点： ​ a++ 先返回a值，再给a+1 ​ ++a 先给a+1，再返回a值 12345$a=10;echo $a++; #输出a 10echo $a; #输出a+1 11echo ++$a; #输出a+1 12echo $a; #输出a 12 7.三元运算符 three​ 一元运算符：！ a++ a-- ​ 二元运算符：a=b a%b a-b ​ 三元运算符：?: 1.定义：简化的if-else结构 2.格式：条件表达式 ? true环境 : false环境； 3.运算规则： ​ 当条件表达式成立时，进入true环境执行；当条件不成立时，进入false环境。 4.实例 ​ echo 1+1==2?&#39;yes!&#39;:&#39;no&#39;; 补充：运算符优先级 2. PHP流程控制在PHP中，主要有四种结构：顺序结构，分支结构，循环结构和异常结构，其中异常结构主要适用于面向对象，先不进行介绍。 1.顺序结构：代码从上往下依次执行；（参考HTML中文档流） 2.分支结构：通过 if / switch 来进行分支选择 3.循环结构：通过 for / while 来重复执行某一部分的代码 以下详细介绍分支结构和循环结构的具体内容 1.顺序结构（不介绍）2.分支结构1.单一分支结构：（if） if( 条件表达式 ) 一行代码； 该结构只能影响紧跟在 if 后面的第一行代码，从第二行开始，就不受 if 判断结果的影响 if( 条件表达式 ){ 一个代码块； } 该结构后面可以跟一整个代码块，通过复合结构（代码块）， if 可以影响多条语句 2.双向分支结构（else） if( 条件表达式 ){ 代码段;}else{ 代码段；} if 语句的延伸，可以对不满足 if 条件的情况进行阐述 3.多向条件分支结构（elseif） if(条件表达式){代码块}elseif（条件）{ ... }elseif(条件){ ... }...else{...} 在 elseif 中只有一个被执行，多个条件是逻辑或的关系，只要有一个满足，就可以进入相应的true环境，优先处理包含范围较小的条件 4.巢状条件分支结构（if 嵌套） 1234567if(条件表达式)&#123; if(条件表达式)&#123; if(条件表达式)&#123; ... &#125;else&#123; ... &#125; &#125;else&#123; ... &#125; &#125;else&#123; ... &#125; 这里的多个条件是逻辑与的关系，要同时满足才能进入最深的true环境 5.多向条件分支结构(switch) 1234567switch( 表达式 )&#123; case 值1: 代码块1；break; case 值2： 代码块2;break; ... case 值n: 代码块n;break; default: 代码块n+1;&#125; 专门用于等值判断， switch 后面的表达式数据类型只能是整型或字符串，不能为bool 值; 若不加 break ，会在匹配到值后继续向下执行后面的所有标识; default 代表不与之前所有值匹配的情况; 6.练习 简易计算器 需求: 由用户输入两组 数值, 并选择运算符, PHP根据运算符结算结果 123456789101112131415161718192021222324//1.接收数据： $n1=empty($_GET[&apos;num1&apos;])? null :$_GET[&apos;num1&apos;]; #三元运算符，若设置则赋值，未设置赋值null//2.根据运算符选择计算方式 $result = null; switch ($ope) &#123; case &apos;+&apos;: $result = $n1 + $n2; break; case &apos;-&apos;: $result = $n1 - $n2; break; case &apos;*&apos;: $result = $n1 * $n2; break; case &apos;/&apos;: $result = $n1 / $n2; break; &#125;//3.HTML表单提交 &lt;input type=&quot;text&quot; name=&quot;num1&quot; value=&quot;&lt;?= $n1 ?&gt;&quot;&gt; &lt;select name=&quot;ope&quot;&gt; &lt;option value=&quot;+&quot; &lt;?= $ope == &apos;+&apos;?&apos;selected&apos;:null ?&gt; &gt;+&lt;/option&gt; &lt;option value=&quot;-&quot; &lt;?= $ope == &apos;-&apos;?&apos;selected&apos;:null ?&gt; &gt;-&lt;/option&gt; &lt;option value=&quot;*&quot; &lt;?= $ope == &apos;*&apos;?&apos;selected&apos;:null ?&gt; &gt;&amp;times;&lt;/option&gt; &lt;option value=&quot;/&quot; &lt;?= $ope == &apos;/&apos;?&apos;selected&apos;:null ?&gt; &gt;&amp;divide;&lt;/option&gt; &lt;/select&gt; #三元运算符，若选中默认显示，未选中为空 &lt;input type=&quot;text&quot; name=&quot;num2&quot; value=&quot;&lt;?= $n2 ?&gt;&quot;&gt; #value输入提交时默认显示 //4.HTML中输出结果 &lt;span&gt; &lt;?= $result ?&gt; &lt;/span&gt; 3.循环结构1.while循环（当） 格式： 12345$sum=1; 初始化;while($num&lt;=100)&#123; while(条件)&#123; echo $num; 代码块； $num++; &#125;&#125; 循环规则： ​ 初始化 –&gt; 条件 成立–&gt; 代码块 –&gt;条件（循环） ​ 不成立 –&gt; 跳出循环 注意： while 循环常用来控制循环次数未知的循环结构，条件表达式的结果必须为 bool 值 2.do…while循环（直到） 格式： 12345$num=1; 初始化;do&#123; do&#123; echo $num; 代码块； $num++; &#125;while（条件）；&#125;while($num&lt;0); 循环规则： ​ 初始化 –&gt; 代码块 –&gt; 条件 成立 –&gt; 代码块（循环） ​ 不成立 –&gt; 跳出循环 注意： do...while 是先执行一次代码块，然后判断是否符合条件，来决定是否继续循环； ​ while(条件) 后面要加上分号 ； ​ 适合执行至少必须循环一次的情况。 3.for循环 格式： for( 初始化 ; 条件表达式 ; 增量 ){ 代码块; } 循环规则： 初始化 –&gt; 条件表达式 成立–&gt; 代码块 –&gt; 增量 –&gt; 条件 –&gt; 代码块（循环） ​ 不成立–&gt; 跳出循环 注意点： for语句中的三部分可以部分或全部为空，如把第一部分初始化语句提到for语句之前，第二部分和第三部分提到for语句之内；（for的退化形式） 123//把初始化提到for之前 $num=1; for(;$num&lt;10;$num++)&#123;echo $num;&#125; 123456//把第三部分增量提到for之内 $num=1; for(;$num&lt;10;)&#123; echo $num; $num++; &#125; 1234567//把第二部分条件表达式提到for之内 $num=1; for(;;)&#123; if($num&lt;10)break; echo $num; $num++; &#125; for语句中的每个部分都可以写多个表达式，之间用 , 逗号隔开； 4.循环语句之间的区别 while语句先判断再执行，do…while语句先执行一次，再判断是否继续循环。 while语句计算机执行速度较快，for语句代码书写方便，排版整洁，使用程度较高。 5.for循环使用技巧 当条件表达式为空或非false值时，程序条件永远满足，产生死循环 12345$x=0;for(;;)&#123; echo $x.&apos; &apos;; $x++;&#125; 当条件表达式为与false等价（0 , 0.0，‘ ‘，…）时，程序认为条件不满足，不会执行; 当初始化表达式为空时，false=0，初始值为0； 当增量为空时，若条件成立则一直循环输出初始值；z 4.特殊流程控制符1.continue当执行到continue时，会准备进入下一轮循环 2.break当执行到break时，会马上结束当前循环或者分支结构 3.die当执行到die时，整个程序结束（后面全部不会执行）（？断点调试？） 5.扩展使用​ 需求：输出0~9，如果碰到4，跳过 12345for($i=0;$i&lt;10;$i++)&#123; if($i!==4)&#123; echo $i.&apos; &apos;; &#125;&#125; 12345for($i=0;$i&lt;10;$i++)&#123; if($i==4)&#123; continue; &#125;echo $i.&apos; &apos;;&#125; ​ 需求：输出0~9，如果碰到4，就结束循环 12345for($i=0;$i&lt;10;$i++)&#123; if($i==4)&#123; break; &#125;echo $i.&apos; &apos;;&#125; ​ 需求：输出0~9，如果碰到4，就结束程序 12345for($i=0;$i&lt;10;$i++)&#123; if($i==4)&#123; die(&apos;111&apos;); &#125;echo $i.&apos; &apos;;&#125; ​ 结论： continue 只是跳过此次循环，继续下次循环； break 是结束本循环结构，继续后面的程序执行； die 是结束整个程序，后面的程序直接无效；（exit 同样） 5.HTML与PHP结合写法 for 和 HTML 混合写法： 123&lt;?php for() ?&gt; HTML代码块&lt;?php endfor ?&gt; if 和 HTML 混合写法： 123456789101112131415161718192021 &lt;?php if() ?&gt; HTML代码块 &lt;?php endif ?&gt; &lt;?php if() ?&gt; HTML代码块(true环境) &lt;?php else: ?&gt; HTML代码块(false环境) &lt;?php endif ?&gt; &lt;?php if(): ?&gt; html代码块 (true环境)&lt;?php elseif(): ?&gt; html代码块 (true环境)&lt;?php elseif(): ?&gt; html代码块 (true环境)&lt;?php elseif(): ?&gt; html代码块 (true环境)&lt;?php else(): ?&gt; html代码块 (false环境)&lt;?php endif ?&gt;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 简介02-数据类型转化]]></title>
    <url>%2F2017%2F12%2F04%2FPHP%20%E5%9F%BA%E7%A1%8002-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96%2F</url>
    <content type="text"><![CDATA[1.几个常用函数1.释放内存：unset（）； 2.检测一个变量是否为空：empty(); 实质上为检测是否与false等价 空=true 非空=false 3.检测一个变量是否设置：isset(); 实际上为检测是否为null或未定义变量 已设置：true 未设置：false 12345678910$a=10; #未空，已设置$a=0; #空，已设置$a=0.0; #空，已设置$a=false; #空，已设置$a=[]; #空，已设置$a=&apos;0&apos;; #空，已设置$a=null; #空，未设置$a=$b; #空，未设置$a=$obj; #未空，已设置$a=$resource; #非空，已设置 2. 输出方式PHP中常用输出方式常见的有4种： 1.echo ​ 为PHP基本语法，支持int，float，string，resource类型的数据输出 ​ 格式：echo &#39;输出内容&#39;； 2.print / print（） ​ print为基本语法结构，print（）为函数，返回值为int ​ 支持int，float，string，resource类型的数据输出 ​ 格式：print 输出内容 print（输出内容）； 3.print_r（） ​ print_r（） 为函数，返回值为bool ​ 支持int，float，string，array，resource，object类型的数据输出 4.var_dump（） ​ var_dump（）为函数，无返回值。可以支持任何类型的数据 print_r() 和 var_dump() 的区别： print_r() 理论上可以输出无数个数据，但实际上受到内存大小的限制 var_dump() 最多只能输出128条数据，其他的隐藏 print_r() 的美化： 123print_r(&apos;&lt;pre&gt;&apos;);print_r($arr);print_r(&apos;&lt;/pre&gt;&apos;); 3. 数据类型转化 DateType运算本质是同类型的数据之间的运算 标量数据的转换分为两种：自动类型转换 和 强制类型转换 1.自动类型转换：隐式转换 布尔型（bool）转为整型（int） 12var_dump(true+10); #11 true-&gt;1var_dump(false+10); #10 false-&gt;0 布尔型（bool）转为浮点型（float） 12var_dump(true+10.5); #11.5 true-&gt;1.0var_dump(false+10.5); #10.5 false-&gt;0.0 字符串（string）转为整型（int） 12345var_dump(&apos;abc&apos;+10); #10var_dump(&apos;123&apos;+10); #133var_dump(&apos;1a2b&apos;+10); #11var_dump(&apos;a1b3&apos;+10); #10var_dump(&apos;12av&apos;+10); #22 从前往后，保留前面的数字，从第一个非数字开始向后全部抛弃（包括后面的数字） 字符串（string）转为浮点型（float） 1234567var_dump( &apos;1.2&apos; + 10.5 ); #11.7var_dump( &apos;1a.2&apos; + 10.5 ); #11.5var_dump( &apos;a1.2&apos; + 10.5 ); #10.5var_dump( &apos;1.2e3&apos; + 10.5 ); #1210.5var_dump( &apos;1.2e3e4&apos; + 10.5 ); #1210.5var_dump( &apos;1.2.3.4&apos; + 10.5 ); #11.7 从前往后，保留前面的数字，从第一个非数字开始向后全部抛弃（包括后面的数字） 识别第一个科学计数法和第一个小数点 整型（int）转为浮点型（float） 1var_dump( 1 + 2.5 ); # 3.5 1 -&gt; 1.0 2.强制类型转换：强制转换 临时转换 通过运算符来强制转换（值适用于标量和复合数据，不包含特殊类型的数据） 123456var_dump((int)$str);var_dump((float)$str);var_dump((bool)$str);var_dump((string)$str);var_dump((object)$str);var_dump((array)$str); 通过函数来强制转换 1234var_dump(intval($str));var_dump(floatval($str));var_dump(boolval($str));var_dump(strval($str)); #字符串转化是strval，而不是stringval 永久转换 通过函数 settype(变量名，类型) 来永久转换数据，之后数据不一定能转换回原数据 12345settype($str,&apos;int&apos;);var_dump($str); settype($str,&apos;string&apos;);var_dump($str); 4. 常量 Define1.常量：经常固定不变的量（constant） 2.格式：格式：const 常量名=常量值； 或者 define(常量名，常量值) 12345const CHINA = &apos;中国&apos;; var_dump( CHINA );define(&apos;NUME&apos;,1000);var_dump(NUME); 注意： ​ 常量名默认区分大小写，推荐使用大写，与变量区分； ​ define函数的完整格式为define（常量名，常量值，bool值），其中总bool值默认值为false，代表区分大小写，若为true则不区分大小写； 3.魔术常量： ​ __FILE__ 当前文件路径 ​ __LINE__ 当前代码行号 ​ __DIR__ 当前文件目录 123var_dump(__FILE__); #:string &apos;D:\wamp\www\XIA\0409\08-define.php&apos; (length=34) var_dump(__LINE__); #:int 39var_dump(__DIR__); #:string &apos;D:\wamp\www\XIA\0409&apos; (length=20) 4.预定义常量： ​ PHP_INT_MAX 显示最大整型常量 ​ PHP_INT_MIN 显示最小整型常量 ​ M_PI 圆周率 ​ PHP_VERSION 显示当前PHP版本号 ​ PHP_OS 显示当前使用操作系统（Windows都显示WINNT） 12345var_dump(PHP_INT_MAX)； #:int 2147483647var_dump(PHP_INT_MIN)； #:int -2147483648var_dump(M_PI)； #:float 3.1415926535898var_dump(PHP_VERSION)； #:string &apos;7.0.4&apos; (length=5)var_dump(PHP_OS); #:string &apos;WINNT&apos; (length=5) 5. 运算符 OperationPHP中运算符主要有以下七种： 算术运算符 自增/自减运算符 赋值运算符 比较运算符 拼接运算符 逻辑运算符 三元运算符 1.算术运算符： ​ 加 减 乘 除 取模（取余） ​ + - * / % ​ 取模（%）详解： ​ 1)普通取模： 123var_dump(5%2); #1var_dump(1%2); #1var_dump(2%2); #0 ​ 2)高阶取模 ​ ①取模的正负：取决于被除数的正负 1234var_dump(5%2); #1var_dump(5%-2); #1var_dump(-5%2); #-1var_dump(-5%-2); #-1 ​ ​ ②取模结果的范围：x~y 12345678var_dump(0%3); #0 # %3var_dump(1%3); #1var_dump(2%3); #2var_dump(3%3); #0var_dump(4%3); #1var_dump(5%3); #2var_dump(6%3); #0var_dump(7%3); #1 # %3的结果永远在0~2之间，都小于3 ​ 12345678var_dump(0%5); #0 # %5var_dump(1%5); #1var_dump(2%5); #2var_dump(3%5); #3var_dump(4%5); #4var_dump(5%5); #0var_dump(6%5); #1var_dump(7%5); #2 # %x的结果永远在0~x-1之间，都小于x ​ ​ 若需求2~5，如何才能达到需求： 1234 0 ~ ？ #？=5-2=3 0~3为%4的结果+ 2----------------- 2 ~ 5 #即要达到2~5的结果，需要%4+2 ​ ​ 推理到x~y，则有：%(y-x+1)+x 1234 0 ~ ? # ?=y-x 为%[(y-x)+1]的结果+ x---------------- x ~ y # 即要达到x~y的结果，需要%（y-x+1）+x]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 基础01- 数据类型]]></title>
    <url>%2F2017%2F11%2F21%2FPHP%20%E5%9F%BA%E7%A1%8001-%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[1.PHPPHP特性： 1.PHP文件或者文件夹命名中不能有中文，不能有中文路径。 2.PHP文件存放位置：wamp/www/目录下。 3.访问PHP脚本的步骤： ​ 开启wamp服务——&gt;在浏览器地址栏中输入：localhost 4.PHP是什么：（Professional Hypertext Preprocessor）超文本预处理器 一句话：一种用来开发动态网站的服务器脚本语言。 5.PHP定界符 ​ 格式：&lt;?php PHP代码 ?&gt; ​ 只有在定界符内的代码才会被PHP解析 6.向浏览器输出一句话：echo &#39;hello,world!&#39;; 7.PHP设置编码（一般情况下，该编码声明写在文件头部） ​ header(&#39;content-type:text/html;charset=&quot;utf-8&quot;&#39;); 8.注释 单行注释：#注释内容 or //注释内容 多行注释：/*注释内容*/ 9.PHP基本语法 每一条命令均以分号（；）结尾，代表这条命令已经结束。 只有最后一条可以不加，但推荐都加上。 10.查询PHP相关信息 ​ phpinfo(); 11.若只想输出一句话，可以使用如下格式： ​ &lt;?=&#39;hello,world!&#39;?&gt; ​ &lt;?php echo &#39;hello,world!&#39;?&gt; 2.变量var1.变量，即未知数（variable）,主要是负责指向（引用）一个值，值不是固定的。 ​ $a=10; 2.格式：$变量名=值； 值必须给定，不给会报错，称之为“未定义变量” 3.变量命名 右数字，字母和下划线组成； 不能以数字开头； 变量严格区分大小写； 支持中文，但不推荐 4.变量技巧 1）可变变量：将一个变量的值作为另一个变量的名字来使用 12345$山鸡 = &apos;陈小春&apos;;$陈小春 = &apos;应采儿&apos;;echo $陈小春; #输出应采儿echo $$山鸡; #输出应采儿 引用变量名为另一个变量值的变量值，可以使用两个$直接引用 2）传值：将一个变量的值赋予另一个变量 12345$a=10;$b=$a; $b=5;echo $a; #输出10echo $b; #输出5 3）传址：将一个变量的内存地址赋予另一个变量 12345$a=10;$b=&amp;$a; $b=5;echo $a; #输出5echo $b; #输出5 3.数据类型PHP中的数据类型包括： 标量类型： 整型 Int 浮点型 Float 布尔型 Bool 字符型 String 复合类型： 数组 array 对象 object 特殊类型： 资源 resource 空类型 NULL 4.整型int1.最大整型：PHP_INT_MAX 最大整型就是php中数据显示为整型的最大值，为2的31次方 若某个值比PHP_INT_MAX还大，则自动转为float型 2.检测是否为整型：is_int(); 输出值为bool值 3.进制 基数 前缀 二进制 0/1 0b 八进制 0~7 0 十进制 0~9 无前缀 十六进制 0~f 0x 4.计算方法： 1）任何进制转为十进制： 次方求和法：∑（基数*进制^次方） 2）十进制转化为其他进制： 除基数取余法：当商比任意进制基数还小时，停止除法运算；将余数倒排序，即得到结果。 快捷方法： 2048 1024 512 256 128 64 32 16 8 4 2 1 5.浮点型 float1.科学计数法： 12$num=2e3;var_dump($num); #输出为浮点型 如果使用科学计数法，则默认该值为浮点型数据 2.判断是否为浮点型数据：is_float(); 3.精度： 浮点型数据在php显示结果中只显示14位有效数字，故在浮点运算中，结果并不精确，浮点型数据不适合做二进制计算，同时也尽量不要用小数做等值判断，防止数值误差产生，得到错误结果 12345678910111213$a=0.1+0.2;var_dump($a);if($a==0.3)&#123; echo &apos;true&apos;;&#125;else&#123; echo &apos;false&apos;; #运算结果为false&#125;if($a&gt;0.3)&#123; echo &apos;true&apos;;&#125;else&#123; echo &apos;false&apos;; #运算结果为true&#125; 6.布尔型 bool/boolean1.值：false true 2.作用：代表两种极端状态，常用与判断比较等 3.判断数据是否属于bool值：is_bool(); 4，等价判断：以下7种情况与false等价 false 0 0.0 ‘’ or ‘0’ NULL空类型 空数组 未定义变量 7.字符串string1.作用： 用于存储or表达信息，包含数字，字母，标点，汉字等 2.格式： 小段内容：单双引号 1234$a=&apos;dead man may never die&apos;;$b=&apos;winter is coming&apos;;var_dump($a);var_dump($b); 大段内容：heredoc结构 1234 $c=&lt;&lt;&lt;xxx曾经跟媳妇吵架, 吵到最激烈的时候, 我就想: 一个大老爷们跟老娘们较什么劲. 当时就跟媳妇道歉了,媳妇挺开心的... 他哥就放下菜刀, 他妹松开了拽着我头发的手, 老丈人拿起了电话: 棺材退了吧. 夫妻之间只要多沟通, 生活还是很和谐.xxx; var_dump($c); 注意： 1）xxx可以替换成任意其他结构次（自制） 2）保证首尾一致 3）开始结构词的后面不能有任何多余的字符（包括空格） 4）结尾结构词的前后不能有任何多余的字符（包括空格） 3.检测类型： 是否为字符串：is_string(); 是否为数字或数字字符串：is_numaric(); 是否为标量类型：is_scalar(); 4.单双引号的区别 单引号：不能识别变量，执行速度快；但不能识别解析转义字符， 双引号：可以识别变量，执行速度较慢；可以识别解析转义字符。 转义字符：\ 能够给普通字母赋予特殊意义，也可以把特殊意义的字符变成普通字符输出。 常见转义字符： \n 换行 \r 回车 \t 制表符Tab \&#39; &#39; \&quot; &quot; \$ $ 8.数组 Array1.简述：键值对； 2.定义：数据的集合； 3.格式：$数组名[]=数组值 或者 $数组名=[值1，值2，值3，...] 4.显示格式： 123456789 显示： array (size=7)$bag[]=&apos;三国演义&apos;; 0 =&gt; string &apos;三国演义&apos; (length=12)$bag[]=&apos;水浒传&apos;; 1 =&gt; string &apos;水浒传&apos; (length=9)$bag[]=&apos;红楼梦&apos;; 2 =&gt; string &apos;红楼梦&apos; (length=9)$bag[]=&apos;西游记&apos;; 3 =&gt; string &apos;西游记&apos; (length=9)$bag[]=&apos;10000&apos;; 4 =&gt; string &apos;10000&apos; (length=5)$bag[]=NULL; 5 =&gt; null$bag[]=1000; 6 =&gt; int 1000var_dump($bag); 5.数组操作： 查询数组中的一个值：通过键来查询； var_dump($bag[2];) 修改数组中的某个值：通过已经存在的键来修改； $bag[1]=&#39;菜根谭&#39;； 新增数组中的某个值：通过不存在的键来新增； $bag[9]=&#39;说文解字’； 删除数组中的某个值：通过键来操作（unset）； unset($bag[1]); 9.空类型 Null1.定义：null代表什么都没有，常用于先占据内存，供后期使用； 2.以下三种情况，直接显示null： 直接赋值null $a=null; 未定义变量 var_dump(@$b); @为错误抑制符，可以临时屏蔽$b的错误； 被删除的变量 unset($c); 注意：只要与false等价，基本都与null等价 10.对象 Object1.对象：在PHP中，一切皆对象 ​ 获取一个对象: 12$a=new stdClass; var_dump($a); #显示：object(stdClass)[1] 11 资源 Resource2.资源：所有的文件都是资源 ​ 获取一个资源： 12$b=fopen(&apos;./ex.html&apos;); var_dump($b); #显示：resource(3, stream)]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 简介-背景特性]]></title>
    <url>%2F2017%2F11%2F14%2FPHP%E7%AE%80%E8%BF%B0-%E8%83%8C%E6%99%AF%E7%89%B9%E6%80%A7%2F</url>
    <content type="text"><![CDATA[1. PHP应用领域 在浏览器端应用的软件, PHP都可以进行开发 门户网站: 新浪, 雅虎, 搜狐 电子商务: 淘宝, 京东 网页游戏的后台 APP接口 企业级项目: OA: 办公自动化系统 (学生, 员工档案, 考勤…) CRM: 客户关系管理系统 (销售, 中介, …) ERP: 企业物资管理系统 ( 快递, 猎头, .. ) 2. PHP市场行情拉勾网 Boss直聘 含金量较高: 100Offer 门槛: 2年以上的工作经验 3. 软件架构模式B/Sbrower/server 浏览器/服务器 无需下载, 通过浏览器来使用 依赖HTTP协议 数据存储服务器上, 安全性高 维护更新, 相对方便, 不占用用户时间 C/Sclient/server 客户端/服务端 先下载安装, 通过特定的客户端来使用 通过多种协议进行通信 数据有的存储在本地, 有的存储在服务器上, 相比B/S安全性低 维护更新, 相对麻烦, 比较占用用户时间 4.动静态网站静态网站在线浏览网页, 但是不能输入数据, 没有数据的更新和交互 动态网站有数据交互过程, 链接数据库 5. 浏览器内核浏览器Trident: IE 独流 Webkit: chrome, safari Gecko: firefox Blink: chrome 壳浏览器360 QQ 搜狗 猎豹 UC 百度 6. 开发工具IDE Sublime Text 3 最轻量级的IDE PHPStrom 最专业, 最热门的IDE之一 ATom Zend Studio VIM NodePad++ 7. LAMP 环境LAMP : Linux + Apache + MySQL + PHP LNMP: Linux + Nginx + MySQL + PHP 操作系统: Linux 服务器: Apache, Nginx 数据库: MySQL 脚本工具: PHP 8.使用PHP的特性PHP特性： 1.PHP文件或者文件夹命名中不能有中文，不能有中文路径。 2.PHP文件存放位置：wamp/www/目录下。 3.访问PHP脚本的步骤： ​ 开启wamp服务——&gt;在浏览器地址栏中输入：localhost 4.PHP是什么：（Professional Hypertext Preprocessor）超文本预处理器 一句话：一种用来开发动态网站的服务器脚本语言。 5.PHP定界符 ​ 格式：&lt;?php PHP代码 ?&gt; ​ 只有在定界符内的代码才会被PHP解析 6.向浏览器输出一句话：echo &#39;hello,world!&#39;; 7.PHP设置编码（一般情况下，该编码声明写在文件头部） ​ header(&#39;content-type:text/html;charset=&quot;utf-8&quot;&#39;); 8.注释 单行注释：#注释内容 or //注释内容 多行注释：/*注释内容*/ 9.PHP基本语法 每一条命令均以分号（；）结尾，代表这条命令已经结束。 只有最后一条可以不加，但推荐都加上。 10.查询PHP相关信息 ​ phpinfo(); 11.若只想输出一句话，可以使用如下格式： ​ &lt;?=&#39;hello,world!&#39;?&gt; ​ &lt;?php echo &#39;hello,world!&#39;?&gt;]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS 基础-03]]></title>
    <url>%2F2017%2F10%2F29%2FCSS-03%2F</url>
    <content type="text"><![CDATA[1.盒子模型 盒子模型分为两类：（非IE）标准物理盒子 和 IE盒子 标准物理盒子：物理空间=内容+边框+内边距 （以外都是外边距） IE盒子：物理空间=内容 内容包括边框和内边距（内容固定，做减法） （以外都是外边距） 2.行块级元素 html中，标签分为两种： 块级 和 行级 块级元素（display：block）： 特征： 1.独占一行。 ​ 2.宽度若不设置，则默认与浏览器宽度一样； ​ 3.高度若不设置，则默认随着内容增高而增高； ​ 4.宽高，行高，内外边距的等属性均可以设置； ​ 5.容纳性：可容纳任何元素； 行级元素（display：inline）： 特征：1.不独占一行； ​ 2.宽度若不设置，则默认随着内容的增加而增加； ​ 3.高度若不设置，则默认随着内容的增高而增高； ​ 4.宽高，内外上下边距等无法控制，行高，内外左右边距等可以控制； ​ 5.容纳性：行级元素 3.内外边距外边距（margin）：定义元素与元素之间的距离 ​ margin：10px；（四边） ​ margin：10px 20px；（上下10，左右20） ​ margin：10px 20px 30px；（上10，左右20，下30） ​ margin：10px 20px 30px 40px；（上10 ，右20，下30，左40） 单边距： ​ margin-方向 :__px； 常用技巧：基于父级宽度内，自动居中 ​ margin-left：auto； ​ margin-right：auto； 常见简写： ​ marigin：__px auto； 内边距（padding）：定义边框与内容之间的距离 ​ padding：10px；（四边） ​ padding：10px 20px ；（上下10，左右20） ​ padding：10px 20px 30px；（上10，左右20，下30） ​ padding：10px 20px 30px 40px；（上10，右20，下30，下40） 单边距 ​ padding-方向：__px; 4.定位(position)使用场景：当元素（标签）发生重合时，就可以使用定位判定双方的位置属性。 属性名：position 属性值： absolute（绝对定位） 定位后是否保留原位置：不保留原来的位置（网） 定位原点：基于网页第一页的四个角落 relative（相对定位） 定位后是否保留原有位置：保留原来的位置（柱子） 定位原点：基于原来位置的四个角落 fixed（固定定位） 定位后是否保留原有位置：不保留原来的位置（网） 定位原点：基于当前可视窗口的四个角落 补充概念： 文档流：在body体中，标签从上往下依次排列，形成一条奔流不止的河流。 定位：脱离文档流，原始位置就会被清除，下方元素上移补位，定位元素就会与文档流中的元素发生重叠 定位优先级(z-index) ​ 当定位元素发生重叠时，可通过z-index来改变上层顺序； ​ 格式：z-index:数字； ​ 其中数字越大，优先级越高 仅限定位元素使用 5.浮动属性名：float 属性值：left | right | none 作用：脱离文档流，将兄弟（同级）元素排成一排 位置：不保留原来的位置 .box1{ background:pink; float:left; /*float:right;*/ } 有些场合不需要保留原来的位置，但有些也需要保留原来的位置 如何保留原来的位置：通过clear清除浮动 6.清除浮动属性名：clear 属性值：left | right | both 方法一：条件（原理） 在兄弟元素的最后面，加空标签（非浮动），通过空标签来清除前面的浮动元素 123456789101112原理 &lt;ul&gt; &lt;li&gt;小米手机&lt;/li&gt; &lt;li&gt;红米&lt;/li&gt; &lt;li&gt;电视&lt;/li&gt; &lt;li&gt;笔记本&lt;/li&gt; &lt;li&gt;家电&lt;/li&gt; &lt;li&gt;新品&lt;/li&gt; &lt;li&gt;路由器&lt;/li&gt; &lt;li&gt;智能硬件&lt;/li&gt; &lt;div style=&quot;clear: left;&quot;&gt;&lt;/div&gt; &lt;/ul&gt; 方法二 ​ 在浮动元素的父级，添加属性overflow：hidden，形成BFC区域，即可清除儿子项的浮动 BFC区域：内部元素不会影响任何外界的元素（统统保留位置） 形成BFC区域的方式：overflow：hidden；或者 float：none； 目前部分浏览器不支持BFC，故不推荐此种写法 12345678910&lt;ul style=&quot;overflow:hidden&quot;&gt; &lt;li&gt;小米手机&lt;/li&gt; &lt;li&gt;红米&lt;/li&gt; &lt;li&gt;电视&lt;/li&gt; &lt;li&gt;笔记本&lt;/li&gt; &lt;li&gt;家电&lt;/li&gt; &lt;li&gt;新品&lt;/li&gt; &lt;li&gt;路由器&lt;/li&gt; &lt;li&gt;智能硬件&lt;/li&gt; &lt;/ul&gt; 方法三 在浮动元素的父级，通过伪对象的方式实现清除儿子项的浮动 12345父级元素::after&#123; content:&apos; &apos;; display:block; /*将当前元素转为块级标签*/ clear:both;&#125; 123456789101112131415161718192021&lt;style&gt; /* 完美点的 方法3 */ ul::before, ul::after&#123; content:&apos;&apos;; display:block; &#125; ul::after&#123; clear:both; &#125;&lt;/style&gt; ...&lt;ul&gt; &lt;li&gt;小米手机&lt;/li&gt; &lt;li&gt;红米&lt;/li&gt; &lt;li&gt;电视&lt;/li&gt; &lt;li&gt;笔记本&lt;/li&gt; &lt;li&gt;家电&lt;/li&gt; &lt;li&gt;新品&lt;/li&gt; &lt;li&gt;路由器&lt;/li&gt; &lt;li&gt;智能硬件&lt;/li&gt; &lt;/ul&gt; ​ 友情提示：浮动若不需要后面的元素向上填充，记得及时清除浮动 四.市场常用写法： 12345678.clearfix::before, .clearfix::after&#123; content:&apos; &apos;; display:block;&#125;.clearfix::after&#123; clear.both&#125;之后儿子项需要使用清除浮动，只需给父级赋予class=&quot;cleanfix&quot; 7.元素转换标签名：display 标签名： block 将当前元素转换为块级元素 （替换：独占一行，可应用宽高控制） .i2{width: 400px; height: 100px; background: skyblue; display: block;} inline 将当前元素转换为行级元素 （替换：无法使用宽高控制，不独占一行） .b1{width: 300px; height: 50px; background: pink; display: inline; } inline-block 将当前元素转换为内联-块元素（既不独占一行(block)，也可以应用宽高控制(inline)） .b3{width: 300px; height: 50px; background: pink; display: inline-block;} table 将当前元素转换为块级表格 table-cell 将当前元素转换为td单元格 none 将当前元素隐藏（不占位） .box1{width: 300px; height: 50px; background: lightgreen; display: none; visibility：hidden 将当前元素隐藏（占位） .box1{width: 300px; height: 50px; background:lightgreen; visibility: hidden;} 8.初始化​ 目的：各个浏览器对css样式的默认设定值不一定一样，为了保证代码在各个浏览器上显示的效果一致，所以需要对浏览器的默认css值重新统一设定，（也称初始化） ​ 主要初始化内容包括：默认内外边距（margin、padding），字体（font），项目符号（li），超链接（a下划线），表格等 9.网页布局主要使用：Div+Css 在布局中主要使用定位和浮动，为方便维护修改，推荐尽量使用浮动 布局规则： 由宏观到微观 先看行，再看列 由上至下，从左到右]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS 基础-02]]></title>
    <url>%2F2017%2F10%2F22%2FCSS-02%2F</url>
    <content type="text"><![CDATA[1.背景属性名：background 子属性名： ​ background-color： 背景颜色 ​ background-image: 背景图片 属性值：url（’ 链接地址 ‘） ​ background-repeat: 背景重复 属性值：no-repeat | repeat-x |repeat-y |repeat（默认） ​ position: X Y 若x和y的值为正数，向右或下移动；若x和y 的值为负数，向左或上移动 ​ background-size： 背景大小 简写：background:[color | image | repeat | position[/size]] 注意：定位position尺寸必须放在size尺寸前面 10px 10px/200px 2.盒子阴影属性名：box-shadow 属性值：s1，s2，s3，s4，s5（color），s6（insert） s1 水平位移 可负值 s2 垂直位移 可负值 s3 模糊度 不能取负值，0为不模糊 s4 阴影面积 不能取负值，0为原大小，可以省略 s5 阴影颜色 内阴影 后加inset，可省略 box-shadow: -104px -97px 0px 0px blue inset; 简写：box-shadow:s1 s2 s3 [s4] s5 [s6;] 拓展： 移动当前元素到页面中间margin:100px auto; solid-实线 dashed-虚线 dotted-点状线 double-双实线 3.平滑过渡属性名：transition 属性值：s1，s2，s3，s4 s1 过渡的标签名（transition-property） ​ 取值：all（所有可以过渡的属性） none（不指定过渡的属性） &lt;标签名&gt; s2 过渡的持续时间（transition-duration） ​ 取值：&lt;持续时间&gt; 1 s = 1000 ms s3 过渡速率（transition-timing-function） ​ 取值：linear（线性） ease（平滑） ease[-in|-out]（缓入、缓出、缓入缓出） s4 延迟时间（transition-delay） 注意：transition能起作用的前提条件是该标签的属性值是可以进行 + / - 的值 eg：transition:a .5s ease / transition：all 1s ease ； / transition:p1,p2,p3 .5s ease 4.变形属性名：transform 属性值： none 不变形 rotate 旋转 单位：deg skew 扭曲 单位：deg skewX 指定水平方向扭曲 skewY 指定垂直方向扭曲 scale 中心缩放 单位：倍数 scaleX 水平缩放 单位：倍数 scaleY 垂直缩放 单位：倍数 translate 位移 单位：px translateX 指定x轴方向的位移 translateY 指定y轴方向的位移 注意：skew扭曲为90*奇数倍时，都会被扭曲成一条线，导致看不见 5.列表样式属性名：list-style 属性值： list-style-image 项目列表标记图像 none 不指定图像 &lt;url(‘ … ‘)&gt; 使用指定图像作为项目列表标记 list-style-position outside 标记放在文本外，且文本不依据标记对齐 inside 标记放置在文本内部，依据标记对其文本 list-style-type 项目列表标记类型 disc 实心圆（默认） circle 空心圆 square 实心方块 none 不适用项目符号 简写：list-style[list-style-image]|[list-style-position]|[list-style-type] 6.溢出属性名：overflow 包括overflow-x，和overflow-y 属性值： visible 不剪切（默认） hidden 将超出对象尺寸的内容进行裁剪，将不出现滚动条。 auto 将超出部分内容剪切，并以滚动条方式显示超出对象 常见属性 ​ width height ​ mingwidth maxheight ​ minheight maxheight 7.文本 text-indent: 首行缩进（也可控制图片）（单位：px ，%，em） text-align: 水平对齐方式（left center right）（对image标签也起作用） text-decoration 划线方式（underline overline line-through none blink） text-shadow 文本阴影 格式：text-shadow：h-shadow v-shadow blur color; text-overflow 溢出文本处理 属性值：clip 修建文本 属性值：ellipsis 使用省略号代替省略的文本ellipsis 强制转为一行：white-space:nowrap; 将溢出内容隐藏：overflow:hidden vertical-align 垂直对齐（top middle bottom） ​ （默认情况情况下，是对外垂直对齐） ​ （若对内对齐，则需要配合display属性） 将当前元素转为td单元display:table cell 垂直居中：line-height:500px; vertical-align:middle; 8.鼠标样式属性名：cursor（光标，指针） 属性值： ​ pointer 指向（手掌样式） ​ text 文本（大写的 i 字样式） ​ move 移动（十字箭头） ​ default 默认（鼠标指针） ​ none 隐藏箭头 补充：progress（正在进行）|wait（等待）|方向-size（双向箭头）|no-drop（无法拖动）|crosshair（十字准星） 9.字体图标 计算机中图片分为两类：位图、矢量图 位图：放大失真 矢量图：放大不失真 字体图标基本都是矢量图，可以使用字体的属性，但不能使用图片的属性 字体图标下载：阿里巴巴矢量图url（‘ https://www.iconfont.cn/ ’） 阿里字体图标使用： ​ 1.下载图标文件 ​ 2.导入iconfont.css文件 ​ 3.给需要使用字体图标的标签赋予class=”iconfont” ​ 4.给需要使用字体图标的位置填写相应的图标符号（查询demo_unicode.html文件）]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS 基础-01]]></title>
    <url>%2F2017%2F10%2F15%2FCSS-01%2F</url>
    <content type="text"><![CDATA[1. css文件导入方式css的导入方式有四种： 内联式 ：在head头标签中，通过style标签书写css 使用场景：测试调试环境 格式 : 12345678&lt;head&gt;&lt;style&gt; p&#123; color:blue; text-indent:2em; &#125;&lt;/style&gt;&lt;/head&gt; 外链式 ：在head头标签中，通过link标签引入css文件 格式： 使用场景：正式上线 123&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;./demo.css&quot;&gt;&lt;/head&gt; 导入式 ：在head头标签中，通过style标签引入css文件 先加载html，再加载css，卡顿时会出现先出现原始内容的情况 123&lt;style&gt; @import url(&apos;.demo.css&apos;)&lt;/style&gt; 注意：@import 必须写在style标签里面的最前面 ​ @import 的本行最后必须加上分号； 内嵌式 ：直接在开始标签中，通过style属性书写css 不推荐，优先级太高，可能打乱整体布局 1&lt;开始标签 style=&quot;属性名：属性值；属性名：属性值；&quot; 2. css基础语法书写格式： 12345选择器&#123; 属性名1：属性值； 属性名2：属性值； 属性名3：属性值； &#125; 注：css属性不区分大小写 css注释：/* 注释内容 */ 3. 颜色属性名：color 字体颜色 属性值： 单词 red white blue … #rgb 000~fff ​ r,g,b 的范围：09 af #rrggbb 000000~ffffff rgb(0255,0255,0~255) rgba(0255,0255,0255,01) 1a:透明度，可小数 hsla（h,s,l,a） 色轮值 h：色调 0~360 s：饱和度 % l：亮度 % a：透明度 0~1 属性名：opacity 透明度 属性值：0~1 可小数 4. 长度单位1绝对长度​ cm 厘米 ​ mm 毫米 ​ in 英寸 1 in=2.54 cm=25.4 mm 2相对长度​ px 像素 ​ em 倍数 ​ % 百分比 5. 基础选择器1 html四大通用属性style 样式 name 命名 class 类，绰号 id 身份码 2 基础选择器- 标签选择器：​ 格式：标签名{…} ​ 特性：匹配方位广，涉及整个body。适合做初始化 - 类选择器：​ 格式：.class名{…} ​ 特性：一个标签可以有多个class名 ​ 多个标签可以有相同的class名 - 身份选择器：​ 格式：#id名{…} ​ 特性：一个标签只能有一个id名，多个标签原则上不能有重复id css可以重复id，但js检查到重复id会报错 6. 选择器详解1.关联选择器 关联选择器：也叫关系选择器 ​ 设：s1,s2,s3,…为基础选择器 ​ 则： 1234s1 s1&#123; ... &#125; 匹配s1下的所有后辈s1&gt;s2&#123; ... &#125; 匹配s1下的所有儿子s2s1+s2&#123; ... &#125; 匹配s1后面的一个兄弟元素s2s1~s2&#123; ... &#125; 匹配s1后面的所有兄弟 2.组合选择器格式：s1，s2，s3，...，sn{ ... } 分别给s1, s2 和 s3等元素赋予相同的css样式 s1, s2等元素之间没有关系 3.伪类选择器格式：s1:hover{ ... } 效果：当鼠标悬停在s1上时，触发css样式 ​ 隔山打牛类： s1:hover s2{} ​ 当鼠标悬停在s1上时，s1下所有后辈s2触发css样式 s1:hover&gt;s2{} 当鼠标悬浮在s1上时，s1下的所有儿子s2触发css样式 s1:hover+s2 当鼠标悬浮在s1上时，s1后的一个兄弟元素s2触发css样式 s1:hover~s2 当鼠标悬停在s1上时，s1后的所有兄弟元素s2触发css样式 引申级 s1:first-child{...} 找s1父级下的第一个标签，若是s1，应用css样式 s1:first-of-type{...} 找到s1父级下的第一个标签，应用css样式 s1:last-child{...} 找s1父级下的最后一个标签，若是s1，应用css样式 s1:last-of-type{...} 找到s1父级下的最后一个标签，应用css样式 s1:nth-child{...} 找s1父级下的指定顺序的标签，若是s1，应用css样式 s1:nth-of-type{...} 找到s1父级下的指定顺序的标签，应用css样式 nth属性值 ​ 单词：奇数（odd） 偶数（even） ​ 公式：一元一次方程（2n）（2n+1）（3n+5） 4.伪对象选择器 s1::before{...}在s1里面内容的最前面 s1::after{...} 在s1里面内容的最后面 content 配合before，代表内容 before和after配合将来的浮动技术做布局使用 7. 优先级各标签权重值： ​ 标签名：1 class名：10 id名：100 优先级规则： ​ 权重值越大，优先级越高 ​ 权重值相同，离标签越近的选择器，优先级越高 权重值可以叠加 最高权重： ​ 没有具体值，只是一种象征 ​ 格式：属性值 !important 继承性： ​ 许多标签都可以继承祖辈的大多数属性，会有小部分属性无法继承 ​ 例如： ​ a标签的颜色 ​ h标签的大小 ​ 。。。 组合选择器前后权重不会叠加，互不影响 8. 边框1 border属性名：border 属性值：方向（top bottom left right） 单边： border-方向-color： 边框单边颜色 ​ border-方向-width： 边框单边宽度 ​ border-方向-style： 边框单边线显示（solid）或关闭（none） 简写：border-方向：[color|width]|style 四边：border-color： 边框四边颜色 ​ border-width： 边框四边宽度 ​ border-style： 边框四边线显示/关闭 简写：border：[color|width]|style 注意：单边和四边属性中，style属性必须设置，简写没有先后顺序要求 2 radius属性名：border-radius 圆角 属性值：px，% ​ border-上下-左右-radius： 单边圆角 3 collapse属性名：border-collapse 边框合并（一般用于表格） 属性值：collapse 4 outline属性名：outline 外轮廓 属性值：与border相同，常用none，取消外轮廓 9. 字体属性名：font 属性值： font-size： 字体大小 不同浏览器最小值不一样，竟可能不要触碰最小值 font-family: 字体家族 必须本地存在该字体，浏览器才可以使用 font-weight： 字体加粗 属性值：加粗（bold）或 普通（normal） font-style： 字体倾斜 属性值：斜体（italic）或 普通（naomal） line-height: 行高 line-height 若设置为与当前元素的高度一致，怎显示垂直居中效果（仅限一行） 简写：font：size familyfont:[weight\style] size [/line-height] family; 注意：font属性至少要写 size 和 family，且 font 属性中 size 必须在family的前面 手册常用公式写法： ​ | 选择左侧或者右侧或者两者都选，前后顺序无要求 ​ [ ] 中括号内部的值可写可不写]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML (基本02)]]></title>
    <url>%2F2017%2F09%2F27%2Fhtml%20-02%2F</url>
    <content type="text"><![CDATA[二.HTML (基本02)1. 多媒体标签1.图片标签标签名： img 属性： 123456789src 图片来源地址 width 图片宽度调节height 图片高度调节title 鼠标悬停显示文本alt 图片加载失败替代文本 注意：高度属性和宽度属性一般不同时使用，避免影响图片固有宽高比。 计算机常用长度单位：px （像素） 1&lt;img src=&quot;图片路径&quot; width=&quot;20px&quot; title=&quot;picture&quot; alt=&quot;~&quot; 2.音频标签标签名： audio 属性： 1234src 音频来源路径controls 控制器loop 循环播放autoplay 自动播放 12&lt;audio src=&quot;音频路径&quot; controls loop autoplay&gt;音频播放异常&lt;/audio&gt; 媒介标签——source 12345&lt;audio controls&gt; &lt;source src=&quot;./music.mp3&quot;&gt; &lt;source src=&quot;./music.amv&quot;&gt; &lt;source src=&quot;./music.fac&quot;&gt;&lt;/audio&gt; 媒介标签提供了一种可能：当所用浏览器不支持某种格式的音频时，有替代格式的同一音频可以正常播放。 3.视频标签标签名： video 属性： 123456src 视频来源地址controls 控制器weight 视频宽度height 视频高度loop 循环播放autoplay 自动播放 1&lt;video src=&quot;视频地址&quot; wieght=&quot;200&quot; controls loop autoplay&gt; 媒介标签——source 12345&lt;video controls&gt; &lt;source src=&quot;./video.mp4&quot;&gt; &lt;source src=&quot;./video.flv&quot;&gt; &lt;source src=&quot;./video.avi&quot;&gt;&lt;/video&gt; 媒介标签提供了一种可能：当所用浏览器不支持某种格式的音频时，有替代格式的同一音频可以正常播放。 4.地址路径计算机文件路径分为 绝对路径 和 相对路径 。 相对路径​ . 当前路径，默认 ​ .. 上一级路径 1234567&lt;img src=&quot;1.jpg&quot;&gt;&lt;img src=&quot;./1.jpg&quot;&gt;&lt;!--以上均为在当前目录下寻找1.jpg文件--&gt;&lt;img src=&quot;../1.jpg&quot;&gt;&lt;img src=&quot;../../1.jpg&quot;&gt;&lt;!--以上两个分别为在上层目录和上上层目录中寻找1.jpg--&gt; 绝对路径盘符式： x:/…/…/… 网址式： http://…/…/… 根目录： /…/…/… 此处的根目录，在wamp中代表www目录 123&lt;img src=&quot;D:/wamp/www/3.jpg&quot;&gt;&lt;img src=&quot;http://localhost/3.jpg&quot; width=&quot;300&quot;&gt;&lt;img src=&quot;/3.jpg&quot; width=&quot;300&quot;&gt; 5.表单声明 表单—常用于和用户做交互 标签名： form（表单声明标签） 属性： 1234567891011121314151617action 指定一个地址，将表单内容提交给服务器 若属性值为空，则默认提交给自己method 指定页面内容传输方式； get 明文传输，为默认传输方式； （查） 速度快，但安全性较低； 传输大小在http协议上没有限制， 实际上受到浏览器限制, 大多数&lt;2KB = 2048 B； post 密文传输； （增删改） 速度相对get要慢，但安全性高； 传输大小在http协议上没有限制， 实际上受到服务器限制；enctype = &quot;multipart/form-date&quot; 专用于提交文件给服务器 使用 12345&lt;form action=&quot;http://www.baidu.com/s&quot; method=&quot;post&quot;&gt; 百度：&lt;input type=&quot;text&quot; name=&quot;word&quot;&gt;&lt;br/&gt; 密码：&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot;&gt;&lt;/form&gt; 6.表单标签 标签名： input 特殊属性： name 给当前标签命名，只有命名之后，服务器才能知道接收的信息属于谁。一般情况下，所有的表单都需要name。 value 给当前标签赋予默认值，其中可手动输入标签，value值可写可不写，不可手动输入标签必须写入value值。 常用属性： type 1234567891011121314type属性值： text 文本域，默认 password 密码域（输入不可见） radio 单选（配合name使用） checkbox 多选 email 邮箱（确保输入&quot;xxx@xxx&quot;格式） number 数字（只能输入数字） url 地址（确保输入&quot;xxx://xxx&quot;格式） date 日期选择 file 文件提交 hidden 隐藏域 search 搜索 submit 提交 button 按钮（必须配合js使用） 12345678910111213141516171819202122232425262728293031323334&lt;form action=&quot;./demo.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-date&quot;&gt;默认文本框：&lt;input&gt; &lt;br&gt;用户名：&lt;input type=&quot;text&quot; name=&quot;userName&quot; value=&quot;id&quot;&gt;&lt;br&gt;密码：&lt;input type=&quot;password&quot; name=&quot;psd&quot;&gt;&lt;br&gt;手机号：&lt;input type=&quot;number&quot; name=&quot;tel&quot;&gt;&lt;br&gt;性别：&lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;man&quot;&gt;男 &lt;input type=&quot;radio&quot; name=&quot;sex&quot; value=&quot;female&quot;&gt;女 &lt;br&gt;爱好:&lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&quot;book&quot;&gt;book &lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&quot;sports&quot;&gt;sports &lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&quot;game&quot;&gt;game &lt;input type=&quot;checkbox&quot; name=&quot;hobby[]&quot; value=&quot;bike&quot;&gt;bike &lt;br&gt;&lt;!--checkbox要将name值后补上[]，才能形成真正的多选 --&gt;邮箱：&lt;input type=&quot;email&quot; name=&quot;email&quot;&gt;&lt;br&gt;生日:&lt;input type=&quot;date&quot; name=&quot;birthday&quot;&gt;&lt;br&gt;搜索：&lt;input type=&quot;search&quot; name=&quot;search&quot;&gt;&lt;br&gt;头像：&lt;input type=&quot;file&quot; name=&quot;icon&quot;&gt;&lt;br&gt;&lt;!--上传文件的3个必要条件--&gt;&lt;!-- 1.file表单必须要有name属性 2.form表单的属性method=post 3.form表单的属性enctype=multipart/form-date--&gt;隐藏域：&lt;input type=&quot;hidden&quot; name=&quot;id&quot; value=&quot;0328&quot;&gt;&lt;br&gt;URL:&lt;input type=&quot;url&quot; name=&quot;url&quot;&gt;&lt;br&gt;&lt;input type=&quot;submit&quot; value=&quot;&quot;&gt;&lt;br&gt;&lt;!--默认为提交--&gt;按钮：&lt;input type=&quot;button&quot; value=&quot;insure&quot;&gt;&lt;/form&gt; 其中由于默认文本框中标签未添加name属性，提交后无法查看相应内容，更改为&lt;input name=&quot;default&quot;&gt;后提交可正常显示 2. 表单1.下拉框表单标签声明标签： select ​ 属性： name 字内容标签： option ​ 属性：value option标签若没有value值则会将正文内容提交给服务器 1234567891011户籍： &lt;select name=&quot;address&quot;&gt; &lt;option&gt;choice&lt;/option&gt; &lt;option value=&quot;1&quot;&gt;shanghai&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;zhejiang&lt;/option&gt; &lt;option value=&quot;3&quot;&gt;jiangsu&lt;/option&gt; &lt;option value=&quot;4&quot;&gt;shadong&lt;/option&gt; &lt;option value=&quot;5&quot;&gt;hunan&lt;/option&gt; &lt;option value=&quot;6&quot;&gt;hubei&lt;/option&gt; &lt;option value=&quot;7&quot;&gt;jiangxi&lt;/option&gt; &lt;/select&gt; 2.快捷键快捷键： 123456789101112131415161718192021222324快捷键： ctrl + c 光标只要在当前行即可 ctrl + v 马上在上一行进行粘贴 ctrl + shift + d 复制当前行到下一行 ctrl + x 删除（本质为剪切） ctrl + alt + 方向键 快速选中 同列光标 ctrl + / 快速注释 emmet插件快速编写类似html标签： $ 索引， 本质就是数字，默认从1开始 $@num 索引， 默认从num开始计数 * 乘以几次，重复几次，出现几个标签 [] 属性 [属性名=属性值] &#123;&#125; 正文内容 实例 12345678910111213141516171819202122&lt;select name=&quot;test&quot;&gt; &lt;!-- option&#123;$&#125;*5 --&gt; &lt;option value=&quot;&quot;&gt;1&lt;/option&gt; &lt;option value=&quot;&quot;&gt;2&lt;/option&gt; &lt;option value=&quot;&quot;&gt;3&lt;/option&gt; &lt;option value=&quot;&quot;&gt;4&lt;/option&gt; &lt;option value=&quot;&quot;&gt;5&lt;/option&gt; &lt;!-- option[value=$]*5 --&gt; &lt;option value=&quot;1&quot;&gt;&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;&lt;/option&gt; &lt;option value=&quot;3&quot;&gt;&lt;/option&gt; &lt;option value=&quot;4&quot;&gt;&lt;/option&gt; &lt;option value=&quot;5&quot;&gt;&lt;/option&gt; &lt;!-- option[value=$]&#123;$@1990&#125;*5 --&gt; &lt;option value=&quot;1&quot;&gt;1990&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;1991&lt;/option&gt; &lt;option value=&quot;3&quot;&gt;1992&lt;/option&gt; &lt;option value=&quot;4&quot;&gt;1993&lt;/option&gt; &lt;option value=&quot;5&quot;&gt;1994&lt;/option&gt;&lt;/select&gt; 3.多文本域标签名： texterea ​ 属性: rows —— 行 ​ cols —— 列 之前input，select 默认值都是valuetextarea 的默认值是正文内容，而非value &lt;textarea rows=&quot;5&quot; cols=&quot;50&quot;&gt;&lt;/textarea&gt; 4.button标签12345&lt;form action=&quot;&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;userName&quot;&gt; &lt;button&gt; button按钮&lt;/button&gt; &lt;input type=&quot;submit&quot;&gt;&lt;/form&gt; form表单中的独立button按钮，默认值也是正文内容 默认效果是将表单内容提交给服务器（同type-submit） 后期更多是配合js，实现更多的效果。 注意：不同于input标签下的type属性值 &lt;input type=&quot;button&quot; value=&quot;提交&quot;&gt; 5.表单常用属性常见属性： 12345678910111213placeholder 背景虚化字minlength 输入值最小长度maxlength 输入值最大长度autofocus 自动获取光标autocomplete 自动提示历史记录 —— on 开启，默认 —— off 关闭required 输入不能为空checked 单选/复选默认勾选项selected 下拉框默认显示项readonly 只读，只能看不能改，提交给服务器disabled 禁用，只能看不能改，不能提交给服务器multiple 开启多选选项 6.头标签设置1234567891011121314151617181920212223&lt;!-- 1.设置编码 &lt;meta charset=&quot;UTF-8&quot;&gt; --&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;!-- 2.设置标题 &lt;title&gt;&lt;/title&gt; --&gt;&lt;title&gt;head标签&lt;/title&gt;&lt;!-- 3.搜索引擎关键字 --&gt;&lt;meta name=&quot;keywords&quot; content=&quot;keyword1,keyword2,...&quot;&gt;&lt;!-- 4.设置描述 --&gt;&lt;meta name=&quot;description&quot; content=&quot;描述内容&quot;&gt;&lt;!-- 5.网页重定向 --&gt;&lt;!-- &lt;meta http-equiv=&quot;refresh&quot; content=&quot;3;url=./041.html&quot; --&gt;&lt;!-- 6.导入css --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;./demo.css&quot;&gt;&lt;!-- 7.导入js --&gt;&lt;script src=&quot;./demo.js&quot;&gt;&lt;/script&gt;&lt;!-- 8.导入icon图标 --&gt;&lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot;&gt; 7.表格表格声明： table 表格标题： caption ​ 表行： tr table row ​ 表头： th table head 表格描述： td table description 设计：先看行，再看列 属性： 1234567891011border 边框宽度 cellspacing 外边距（单元格之间的距离） cellpadding 内边距（单元格与内容之间的距离） width 表格宽度 height 表格高度 colspan 列合并 rowspan 行合并 align 水平对齐：（left/center/right） valign（vertical） 垂直对齐：（top/middle/bottom） bgcolor 背景颜色 background 背景图片 8.下拉框表单标签声明标签： select ​ 属性： name 字内容标签： option ​ 属性：value option标签若没有value值则会将正文内容提交给服务器 1234567891011户籍： &lt;select name=&quot;address&quot;&gt; &lt;option&gt;choice&lt;/option&gt; &lt;option value=&quot;1&quot;&gt;shanghai&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;zhejiang&lt;/option&gt; &lt;option value=&quot;3&quot;&gt;jiangsu&lt;/option&gt; &lt;option value=&quot;4&quot;&gt;shadong&lt;/option&gt; &lt;option value=&quot;5&quot;&gt;hunan&lt;/option&gt; &lt;option value=&quot;6&quot;&gt;hubei&lt;/option&gt; &lt;option value=&quot;7&quot;&gt;jiangxi&lt;/option&gt; &lt;/select&gt; 9.快捷键快捷键： 123456789101112131415161718192021222324快捷键： ctrl + c 光标只要在当前行即可 ctrl + v 马上在上一行进行粘贴 ctrl + shift + d 复制当前行到下一行 ctrl + x 删除（本质为剪切） ctrl + alt + 方向键 快速选中 同列光标 ctrl + / 快速注释 emmet插件快速编写类似html标签： $ 索引， 本质就是数字，默认从1开始 $@num 索引， 默认从num开始计数 * 乘以几次，重复几次，出现几个标签 [] 属性 [属性名=属性值] &#123;&#125; 正文内容 实例 12345678910111213141516171819202122&lt;select name=&quot;test&quot;&gt; &lt;!-- option&#123;$&#125;*5 --&gt; &lt;option value=&quot;&quot;&gt;1&lt;/option&gt; &lt;option value=&quot;&quot;&gt;2&lt;/option&gt; &lt;option value=&quot;&quot;&gt;3&lt;/option&gt; &lt;option value=&quot;&quot;&gt;4&lt;/option&gt; &lt;option value=&quot;&quot;&gt;5&lt;/option&gt; &lt;!-- option[value=$]*5 --&gt; &lt;option value=&quot;1&quot;&gt;&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;&lt;/option&gt; &lt;option value=&quot;3&quot;&gt;&lt;/option&gt; &lt;option value=&quot;4&quot;&gt;&lt;/option&gt; &lt;option value=&quot;5&quot;&gt;&lt;/option&gt; &lt;!-- option[value=$]&#123;$@1990&#125;*5 --&gt; &lt;option value=&quot;1&quot;&gt;1990&lt;/option&gt; &lt;option value=&quot;2&quot;&gt;1991&lt;/option&gt; &lt;option value=&quot;3&quot;&gt;1992&lt;/option&gt; &lt;option value=&quot;4&quot;&gt;1993&lt;/option&gt; &lt;option value=&quot;5&quot;&gt;1994&lt;/option&gt;&lt;/select&gt; 10.多文本域标签名： texterea ​ 属性: rows —— 行 ​ cols —— 列 之前input，select 默认值都是valuetextarea 的默认值是正文内容，而非value &lt;textarea rows=&quot;5&quot; cols=&quot;50&quot;&gt;&lt;/textarea&gt; 11.button标签12345&lt;form action=&quot;&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;userName&quot;&gt; &lt;button&gt; button按钮&lt;/button&gt; &lt;input type=&quot;submit&quot;&gt;&lt;/form&gt; form表单中的独立button按钮，默认值也是正文内容 默认效果是将表单内容提交给服务器（同type-submit） 后期更多是配合js，实现更多的效果。 注意：不同于input标签下的type属性值 &lt;input type=&quot;button&quot; value=&quot;提交&quot;&gt; 12.表单常用属性常见属性： 12345678910111213placeholder 背景虚化字minlength 输入值最小长度maxlength 输入值最大长度autofocus 自动获取光标autocomplete 自动提示历史记录 —— on 开启，默认 —— off 关闭required 输入不能为空checked 单选/复选默认勾选项selected 下拉框默认显示项readonly 只读，只能看不能改，提交给服务器disabled 禁用，只能看不能改，不能提交给服务器multiple 开启多选选项 13.头标签设置1234567891011121314151617181920212223&lt;!-- 1.设置编码 &lt;meta charset=&quot;UTF-8&quot;&gt; --&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;!-- 2.设置标题 &lt;title&gt;&lt;/title&gt; --&gt;&lt;title&gt;head标签&lt;/title&gt;&lt;!-- 3.搜索引擎关键字 --&gt;&lt;meta name=&quot;keywords&quot; content=&quot;keyword1,keyword2,...&quot;&gt;&lt;!-- 4.设置描述 --&gt;&lt;meta name=&quot;description&quot; content=&quot;描述内容&quot;&gt;&lt;!-- 5.网页重定向 --&gt;&lt;!-- &lt;meta http-equiv=&quot;refresh&quot; content=&quot;3;url=./041.html&quot; --&gt;&lt;!-- 6.导入css --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;./demo.css&quot;&gt;&lt;!-- 7.导入js --&gt;&lt;script src=&quot;./demo.js&quot;&gt;&lt;/script&gt;&lt;!-- 8.导入icon图标 --&gt;&lt;link rel=&quot;icon&quot; href=&quot;favicon.ico&quot;&gt; 14.表格表格声明： table 表格标题： caption ​ 表行： tr table row ​ 表头： th table head 表格描述： td table description 设计：先看行，再看列 属性： 1234567891011border 边框宽度 cellspacing 外边距（单元格之间的距离） cellpadding 内边距（单元格与内容之间的距离） width 表格宽度 height 表格高度 colspan 列合并 rowspan 行合并 align 水平对齐：（left/center/right） valign（vertical） 垂直对齐：（top/middle/bottom） bgcolor 背景颜色 background 背景图片 3. 布局1.大分帧 大分帧：frameset （在 html5 中已经淘汰，但很多较老的网页还在用大分帧布局） （frameset 与 body 标签不能共存） 标签名： frameset 设置窗口（分帧） 格式： 123456&lt;frameset rows=&quot;x%,x%&quot;&gt; &lt;frameset col=&quot;x%,x%&quot;&gt; &lt;frame&gt; &lt;frame&gt; &lt;frame&gt; &lt;frame&gt;&lt;/frameset&gt; &lt;/frameset&gt;&lt;!--可以嵌套使用，嵌套时，将下次要分频的frame标签替换为frameset--&gt; 属性： rows 行分 ​ cols 列分 ​ * 剩余空间 ​ noresize 固定分频区域 ​ frameborder 分频边框关闭(=0)或开启(非0) 子标签名： frame 窗口（分帧） 属性： src 窗口内容来源地址 ​ name 给当前窗口命名 ​ scrolling 设置滚动条启用(=yes)或禁用(=no) 12345678&lt;!-- 设置上，下（左，右）分频，并自定义内容--&gt;&lt;frameset rows=&quot;10%,90%&quot; noresize frameborder=&quot;1&quot;&gt; &lt;frame src=&quot;./topPage.jpg&quot; name=&quot;top&quot; scrolling=&quot;no&quot;&gt; &lt;frameset cols=&quot;20%,*&quot;&gt; &lt;frame src=&quot;xxx.html&quot; name=&quot;left&quot; scrolling=&quot;no&quot;&gt; &lt;frame src=&quot;xxx.html&quot; name=&quot;right&quot;&gt; &lt;/frameset&gt;&lt;/frameset&gt; 2.小分帧标签名： iframe 属性 ： scrolling 滚动条（yes/no） ​ src 引用来源 ​ width 小分帧宽度 ​ height 小分帧高度 ​ frameborder 小分帧边框显示（0/非0） ​ name 给小分帧命名 格式： 12&lt;iframe src=&quot;广告来源地址&quot; scrolling=&quot;no&quot; width=&quot;500&quot; height=&quot;200&quot; frameborder=&quot;no&quot;&gt;&lt;/iframe&gt;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML (基本01)]]></title>
    <url>%2F2017%2F09%2F21%2Fhtml%20-01%2F</url>
    <content type="text"><![CDATA[一.HTML (基本01)准备工作 1.常见的几种文件类型： *.html *.css *.js *.php *.sql 2.wamp存放位置：~/wamp/www/ 3.运行：打开wamp ​ 打开浏览器 ​ 地址栏输入localhost 1.HTML简介12345678910&lt;!DOCTYPE html&gt; &lt;!--声明--&gt;&lt;html lang=&quot;en&quot;&gt; &lt;!--语言--&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;!--编码--&gt; &lt;title&gt;标题&lt;/title&gt;&lt;/head&gt;&lt;body&gt; 正文内容&lt;/body&gt;&lt;/html&gt; ​ 以上为基本的一段html代码，包含版本声明，编码，标题，其中全局架构标签为html，head，body。body标签内部的才是文字，图片，音视频等内容需要占用的位置。 编码： 计算机早期, 世界只有ASCII编码, 只有128个, 不认识汉语, 韩语, 日语新一代的编码 Unicode编码, 支持世界上绝大多数的语言, 数字, 字母, 标点, 汉字等都占4个字节升级版 UTF-8 编码 (万国码), 数字,字母,标点占1B, 汉字占3B 2.基本语法①.全局架构标签 html head body ②.注释注释是对代码的描述，不会显示在页面上，但可以增加代码的可读性 格式： 注意：不能嵌套使用 ③.标签格式网页全部是由标签组成的，标签分为两种： 单标签：&lt;开始标签/&gt; 如:&lt;br/&gt;,&lt;hr/&gt;,&lt;img/&gt;,&lt;meta/&gt; 双标签：&lt;开始标签&gt;正文内容&lt;结束标签/&gt; 如： &lt;p&gt; &lt;/p&gt; ④.标签属性格式：&lt;开始标签 属性名=“属性值” 属性名=“属性值” ...&gt; 标签属性写在标签内部，每对属性之间至少保留一个空格 标签名和属性名不区分大小写 3.浏览器特性1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html lang=&quot;cn&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;浏览器特性&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;浏览器特性&lt;/h1&gt; &lt;hr&gt; 亚洲有四大邪术: 日本的化妆术 韩国的整容术 泰国的变性术 中国的PS术&lt;/body&gt;&lt;/html&gt; 虽然在代码中进行了排版，但实际效果是： 注意：浏览器中，任何多的空格和回车，要么不解析，要么解析为一个空格，利用这个特性，可以在代码中做好排版和注释。 一个职业程序员，应该有良好的注释习惯及排版审美 4.文本格式标签①.标题标签&lt;h1&gt;标题&lt;/h1&gt; 从&lt;h1&gt;到&lt;h6&gt;,标题格式由高层级向低层级转化。一般常用的为h1到h4 其中h1标签在一个页面中最好只用一次，因为h1可以用于提高搜索排名，而使用两次及以上，则会被搜索引擎拉入黑名单。 ②.段落标签&lt;p&gt;正文&lt;/p&gt; 在p标签中的文字，为一个段落。不同段间上下行间间距较大，自动换行 ③.样式标签 &lt;b&gt;bold&lt;/b&gt; 加粗 &lt;i&gt;italic&lt;/i&gt; 倾斜 &lt;u&gt;underline&lt;/u&gt; 下划线 &lt;del&gt;delete&lt;/del&gt; 删除线 只负责表面样式，不具备实际意义。 ④.语义化标签 &lt;strong&gt; strong&lt;/strong&gt; 强调 &lt;em&gt;emphasize&lt;/em&gt; 加强 不仅负责表面样式，还具备方便浏览器解析的特性 ⑤.上、下标 x&lt;sup&gt;2&lt;/sup&gt; 上标 x2 CO&lt;sub&gt;2&lt;/sub&gt; 下标 CO2 ⑥.原样输出 &lt;pre&gt; &lt;/pre&gt; 保持代码样式格式输出 5.列表标签场景: 一排排 or 一列列长的差不多, 样式相似, 都可以用列表 有序列表ol（ordered list） 1234567《回乡偶书》 &lt;ol&gt; &lt;li&gt;瘦小离家老大回&lt;/li&gt; &lt;li&gt;乡音未改肉成堆&lt;/li&gt; &lt;li&gt;儿童相见不相识&lt;/li&gt; &lt;li&gt;请问胖子你是谁&lt;/li&gt; &lt;/ol&gt; 无序列表ul（UNordered list） 1234567《静夜思》 &lt;ul&gt; &lt;li&gt;窗前明月光&lt;/li&gt; &lt;li&gt;地上鞋两双&lt;/li&gt; &lt;li&gt;一对狗男女&lt;/li&gt; &lt;li&gt;其中就有你&lt;/li&gt; &lt;/ul&gt; 定义列表dl（defined list） 123456&lt;dl&gt; &lt;dt&gt;帮助中心&lt;/dt&gt; &lt;dd&gt;账户管理&lt;/dd&gt; &lt;dd&gt;购物指南&lt;/dd&gt; &lt;dd&gt;订单操作&lt;/dd&gt; &lt;/dl&gt; 在实际开发中, ul 使用频率比较 ol 高, 原因是ul解析不用排序，速度比ol快一点 6.实体符号 基本格式： &amp;符号代码； 空格 &amp;nbsp； 小于 &amp;lt； &lt; 大于 &amp;gt； &gt; 版权 &amp;copy； © 人民币 &amp;yen； ¥ 其余实体符号具体参考实体符号速查表 符号代码 释义 表现 &amp;hearts; 爱心 &hearts; &amp;euro; 欧元 &euro; &amp;frac25; 分数 &frac25; &amp;uarr; 向上箭头 &uarr; &amp;larr; 向左箭头 &larr; 7.超链接 标签名：a 属性： href 链接地址 target 在制定窗口打开链接 _self 在本窗口打开链接，默认 _blank 在新的空白页打开链接 _top 在顶级窗口打开链接 自定义name窗口 注意点：链接地址为协议+域名，若不写地址，则默认跳转到当前页面 任意一个地址只会对应一个文件 在任意目录下，命名为 index.html 或者 index.php 的文件，访问该目录时会自动执行index文件。 URL：网址 在完整地址中，第一个？是文件与参数的分隔符 参数 格式：参数名1=”参数值1” 参数名1=”参数值1” 多个参数之间有&amp;隔开 锚点 格式： #锚点名 必须在锚点名前加#号 1&lt;a href=&quot;http://www.xxx.com:80/image/av/a.jpg?name=yuhan&amp;age=18#xxoo&quot;&gt; 瞎编的完整地址 &lt;/a&gt; 8.锚点作用：跳转至某一页面或者某一节点 步骤： ​ 1.确定锚点：HTML4 name=”锚点名” ​ HTML5 id=”锚点名” ​ 2.跳转到锚点： ​ &lt;a href=&quot;url+#锚点名&quot;&gt;点击跳转&lt;/a&gt; 注意点：链接地址为协议+域名，若不写地址，则默认跳转到当前页面 baidu]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
</search>
